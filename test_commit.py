import unittest
from unittest import TestCase
import numpy as np
import unidiff

import commit
from collections import namedtuple
import random

random.seed(42)


# coverage report -m
# coverage run .\test_commit.py; coverage html; start .\htmlcov\index.html


class Test(TestCase):
    def setUp(self):
        self.dummy_diff = "diff --git a/file b/file\nindex 715d914..7b3f2d4 100644\n--- a/file\n+++ b/file\n@@ -1 +1 @@\n-line 1\n+line 1 modified"
        self.commit_strings = [
            '2641cc5c8037cf8b00cc0ff736c5d87f0b20e3b1\n33299ac78503b3871b4a04f9def02497848eef57\nYuriy Artamonov\n[ui] IJPL-159602 New file: experimental option to use popup step instead of sub menusGitOrigin-RevId: aad8d335e2d876506a2948071644685ff99e14e4\n####xxx_next_diff_xxx####\ndiff --git a/platform/lang-impl/src/com/intellij/ide/actions/WeighingNewActionGroup.java b/platform/lang-impl/src/com/intellij/ide/actions/WeighingNewActionGroup.java\nindex 715d914d4bfa..7b3f2d4f8ed0 100644\n--- a/platform/lang-impl/src/com/intellij/ide/actions/WeighingNewActionGroup.java\n+++ b/platform/lang-impl/src/com/intellij/ide/actions/WeighingNewActionGroup.java\n@@ -1,12 +1,22 @@\n // Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.\n package com.intellij.ide.actions;\n \n+import com.intellij.idea.ActionsBundle;\n import com.intellij.openapi.actionSystem.*;\n+import com.intellij.openapi.actionSystem.impl.ActionButton;\n+import com.intellij.openapi.actionSystem.impl.ActionMenu;\n import com.intellij.openapi.project.DumbAware;\n+import com.intellij.openapi.ui.popup.JBPopupFactory;\n+import com.intellij.openapi.ui.popup.ListPopup;\n+import com.intellij.openapi.util.registry.Registry;\n import com.intellij.openapi.util.text.TextWithMnemonic;\n+import com.intellij.ui.awt.RelativePoint;\n import org.jetbrains.annotations.ApiStatus;\n import org.jetbrains.annotations.NotNull;\n \n+import java.awt.*;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseEvent;\n import java.util.function.Supplier;\n \n @ApiStatus.Internal\n@@ -28,6 +38,14 @@ public class WeighingNewActionGroup extends WeighingActionGroup implements DumbA\n     if (e.getPresentation().getTextWithPossibleMnemonic() != prev) {\n       e.getPresentation().setTextWithMnemonic(prev);\n     }\n+\n+    if (isPopupGroup() && ActionPlaces.isPopupPlace(e.getPlace())) {\n+      Presentation p = e.getPresentation();\n+      p.setText(ActionsBundle.message("group.WeighingNewGroup.text.popup"));\n+      p.setPerformGroup(true);\n+      p.putClientProperty(ActionButton.HIDE_DROPDOWN_ICON, true);\n+      p.putClientProperty(ActionMenu.SUPPRESS_SUBMENU, true);\n+    }\n   }\n \n   @Override\n@@ -36,4 +54,25 @@ public class WeighingNewActionGroup extends WeighingActionGroup implements DumbA\n     return aClass == CreateFileAction.class || aClass == CreateDirectoryOrPackageAction.class ||\n            "NewModuleInGroupAction".equals(aClass.getSimpleName());\n   }\n+\n+  @Override\n+  public void actionPerformed(@NotNull AnActionEvent e) {\n+    if (isPopupGroup()) {\n+      ListPopup popup = JBPopupFactory.getInstance().createActionGroupPopup(\n+        ActionsBundle.message("NewFile.popup.title"), this, e.getDataContext(), JBPopupFactory.ActionSelectionAid.SPEEDSEARCH,\n+        false, null, 20, null, ActionPlaces.getPopupPlace("NewFile"));\n+      InputEvent inputEvent = e.getInputEvent();\n+      if (inputEvent instanceof MouseEvent) {\n+        Component component = inputEvent.getComponent();\n+        popup.show(new RelativePoint(component, new Point(0, 0)));\n+      }\n+      else {\n+        popup.showInBestPositionFor(e.getDataContext());\n+      }\n+    }\n+  }\n+\n+  private static boolean isPopupGroup() {\n+    return Registry.is("ide.project.view.new.file.popup", true);\n+  }\n }\ndiff --git a/platform/platform-resources-en/src/messages/ActionsBundle.properties b/platform/platform-resources-en/src/messages/ActionsBundle.properties\nindex 293053ce1524..14a6529cac6c 100644\n--- a/platform/platform-resources-en/src/messages/ActionsBundle.properties\n+++ b/platform/platform-resources-en/src/messages/ActionsBundle.properties\n@@ -286,6 +286,8 @@ group.NewElement.text=_New\n group.NewElementMenu.text=_New\n group.NewElementInMenuGroup.text=_New\n group.WeighingNewGroup.text=_New\n+group.WeighingNewGroup.text.popup=_New\\u2026\n+NewFile.popup.title=New\n action.NewClass.text=Java Class\n action.NewFile.text=File\n action.NewFile.description=Create new file\ndiff --git a/platform/platform-resources/src/META-INF/PlatformLangPlugin.xml b/platform/platform-resources/src/META-INF/PlatformLangPlugin.xml\nindex afdf3c514973..47147d48fb41 100644\n--- a/platform/platform-resources/src/META-INF/PlatformLangPlugin.xml\n+++ b/platform/platform-resources/src/META-INF/PlatformLangPlugin.xml\n@@ -134,6 +134,9 @@\n                         serviceImplementation="com.intellij.psi.impl.source.tree.injected.InjectedEditorWindowTrackerImpl"/>\n \n     <applicationInitializedListener implementation="com.intellij.openapi.fileTypes.impl.associate.OSFileAssociationStartupConfigurator"/>\n+\n+    <registryKey key="ide.project.view.new.file.popup" defaultValue="false"\n+                 description="Switches submenu in File - New to popup step" />\n   </extensions>\n \n   <xi:include href="/META-INF/diff-impl.xml">\ndiff --git a/platform/platform-resources/src/idea/LangActions.xml b/platform/platform-resources/src/idea/LangActions.xml\nindex 744d26b6f73d..892275e28259 100644\n--- a/platform/platform-resources/src/idea/LangActions.xml\n+++ b/platform/platform-resources/src/idea/LangActions.xml\n@@ -769,7 +769,9 @@\n       <group id="NewFromTemplate" class="com.intellij.ide.fileTemplates.actions.CreateFromTemplateGroup"/>\n     </group>\n \n-    <group id="WeighingNewGroup" class="com.intellij.ide.actions.WeighingNewActionGroup" popup="true" searchable="false"/>\n+    <!--suppress PluginXmlValidity -->\n+    <group id="WeighingNewGroup" class="com.intellij.ide.actions.WeighingNewActionGroup"\n+           popup="true" searchable="false" use-shortcut-of="NewElement"/>\n     <reference ref="AssociateWithFileType"/>\n \n     <reference id="OpenInRightSplit">\n\n',
            '4cb295478c8bab87c0e423e8b08d3c10250d4d64\n2641cc5c8037cf8b00cc0ff736c5d87f0b20e3b1\nVladimir Krivosheev\nIJPL-159596 remove not really useful check that prevents using test sourcesGitOrigin-RevId: 284289c81fc566f746b91c6e09f3c7ef75e91d99\n####xxx_next_diff_xxx####\ndiff --git a/platform/build-scripts/src/org/jetbrains/intellij/build/impl/DistributionJARsBuilder.kt b/platform/build-scripts/src/org/jetbrains/intellij/build/impl/DistributionJARsBuilder.kt\nindex 1c8373336177..25386034ae2d 100644\n--- a/platform/build-scripts/src/org/jetbrains/intellij/build/impl/DistributionJARsBuilder.kt\n+++ b/platform/build-scripts/src/org/jetbrains/intellij/build/impl/DistributionJARsBuilder.kt\n@@ -809,28 +809,6 @@ fun getOsAndArchSpecificDistDirectory(osFamily: OsFamily, arch: JvmArchitecture,\n }\n \n private fun checkOutputOfPluginModules(mainPluginModule: String, includedModules: Collection<ModuleItem>, moduleExcludes: Map<String, List<String>>, context: BuildContext) {\n-  // don\'t check modules which are not direct children of lib/ directory\n-  val modulesWithPluginXml = mutableListOf<String>()\n-  for (item in includedModules) {\n-    if (!item.relativeOutputFile.contains(\'/\')) {\n-      val moduleName = item.moduleName\n-      if (containsFileInOutput(moduleName = moduleName,\n-                               filePath = "META-INF/plugin.xml",\n-                               excludes = moduleExcludes[moduleName] ?: emptyList(),\n-                               context = context)) {\n-        modulesWithPluginXml.add(moduleName)\n-      }\n-    }\n-  }\n-\n-  check(!modulesWithPluginXml.isEmpty()) {\n-    "No module from \\\'$mainPluginModule\\\' plugin contains plugin.xml"\n-  }\n-  check(modulesWithPluginXml.size == 1) {\n-    "Multiple modules (${modulesWithPluginXml.joinToString()}) from \\\'$mainPluginModule\\\' plugin " +\n-    "contain plugin.xml files so the plugin won\\\'t work properly"\n-  }\n-\n   for (module in includedModules.asSequence().map { it.moduleName }.distinct()) {\n     if (module == "intellij.java.guiForms.rt" ||\n         !containsFileInOutput(moduleName = module,\n\n',
            '49dc267f35f1f687b3dac4b06277bda50b3b9921\n4cb295478c8bab87c0e423e8b08d3c10250d4d64\nVladimir Krivosheev\nIJPL-159596 cleanupGitOrigin-RevId: 9f4c4e6bd4c02ef6cc016b497107f865f47821dc\n####xxx_next_diff_xxx####\ndiff --git a/platform/build-scripts/dev-server/src/DevMainImpl.kt b/platform/build-scripts/dev-server/src/DevMainImpl.kt\nindex 02513386b151..64cbb98cf320 100644\n--- a/platform/build-scripts/dev-server/src/DevMainImpl.kt\n+++ b/platform/build-scripts/dev-server/src/DevMainImpl.kt\n@@ -27,6 +27,7 @@ import java.nio.file.Path\n \n fun buildDevMain(): Collection<Path> {\n   //TracerProviderManager.setOutput(Path.of(System.getProperty("user.home"), "trace.json"))\n+  @Suppress("TestOnlyProblems")\n   val ideaProjectRoot = Path.of(PathManager.getHomePathFor(PathManager::class.java)!!)\n   System.setProperty("idea.dev.project.root", ideaProjectRoot.toString().replace(File.separator, "/"))\n \n@@ -41,7 +42,7 @@ fun buildDevMain(): Collection<Path> {\n       .setResource(Resource.create(Attributes.of(AttributeKey.stringKey("service.name"), "builder")))\n       .build()\n     try {\n-      // don\'t use JaegerJsonSpanExporter - not needed for clients, should be enabled only if needed to avoid writing ~500KB JSON file\n+      // don\'t use JaegerJsonSpanExporter - not needed for clients, should be enabled only if needed to avoid writing a ~500KB JSON file\n       traceManagerInitializer = {\n         val openTelemetry = OpenTelemetrySdk.builder()\n           .setTracerProvider(tracerProvider)\n@@ -61,6 +62,7 @@ fun buildDevMain(): Collection<Path> {\n             newClassPath = classPath\n             homePath = runDir.toString().replace(File.separator, "/")\n \n+            @Suppress("SpellCheckingInspection")\n             val exceptions = setOf("jna.boot.library.path", "pty4j.preferred.native.folder", "jna.nosys", "jna.noclasspath", "jb.vmOptionsFile")\n             val systemProperties = System.getProperties()\n             for ((name, value) in getIdeSystemProperties(runDir).map) {\n@@ -78,8 +80,8 @@ fun buildDevMain(): Collection<Path> {\n       traceManagerInitializer = { throw IllegalStateException("already built") }\n     }\n   }\n-  if (homePath != null) {\n-    System.setProperty(PathManager.PROPERTY_HOME_PATH, homePath!!)\n+  homePath?.let {\n+    System.setProperty(PathManager.PROPERTY_HOME_PATH, it)\n   }\n   return newClassPath!!\n }\n\\ No newline at end of file\n\n',
            'f7d1a73f2f9eca256ef94de1b54b29a8be09198b\n49dc267f35f1f687b3dac4b06277bda50b3b9921\nDmitry Zhuravlev\n[wsl] vcs: implement pinentry application for requesting GPG key secret (IJPL-73983)GitOrigin-RevId: 9e1febfef23189adbc64e5de98c62e7b76f74684\n####xxx_next_diff_xxx####\ndiff --git a/plugins/git4idea/src/git4idea/commit/signing/GpgAgentConfigurator.kt b/plugins/git4idea/src/git4idea/commit/signing/GpgAgentConfigurator.kt\nindex e177a53fffd4..3df76aadc0a6 100644\n--- a/plugins/git4idea/src/git4idea/commit/signing/GpgAgentConfigurator.kt\n+++ b/plugins/git4idea/src/git4idea/commit/signing/GpgAgentConfigurator.kt\n@@ -68,11 +68,17 @@ internal class GpgAgentConfigurator(private val project: Project, cs: CoroutineS\n     withContext(Dispatchers.IO) { doConfigure() }\n   }\n \n-  private fun createPathLocator(): GpgAgentPathsLocator {\n+  private fun createPathLocator(executor: GitExecutable): GpgAgentPathsLocator {\n+    if (executor is GitExecutable.Wsl) {\n+      return WslGpgAgentPathsLocator(executor)\n+    }\n     return MacAndUnixGpgAgentPathsLocator()\n   }\n \n-  private fun createGpgAgentExecutor(): GpgAgentCommandExecutor {\n+  private fun createGpgAgentExecutor(executor: GitExecutable): GpgAgentCommandExecutor {\n+    if (executor is GitExecutable.Wsl) {\n+      return WslGpgAgentCommandExecutor(project, executor)\n+    }\n     return LocalGpgAgentCommandExecutor()\n   }\n \n@@ -81,13 +87,13 @@ internal class GpgAgentConfigurator(private val project: Project, cs: CoroutineS\n     val executable = GitExecutableManager.getInstance().getExecutable(project)\n     if (!isEnabled(executable)) return\n \n-    val gpgAgentPaths = pathLocator?.resolvePaths() ?: createPathLocator().resolvePaths() ?: return\n+    val gpgAgentPaths = pathLocator?.resolvePaths() ?: createPathLocator(executable).resolvePaths() ?: return\n     val gpgAgentConf = gpgAgentPaths.gpgAgentConf\n     var needBackup = gpgAgentConf.exists()\n     if (!needBackup) {\n       LOG.debug("Cannot locate $gpgAgentConf, creating new")\n       gpgAgentConf.write("$GPG_AGENT_PINENTRY_PROGRAM_CONF_KEY ${gpgAgentPaths.gpgPinentryAppLauncherConfigPath}")\n-      restartAgent()\n+      restartAgent(executable)\n       needBackup = false\n     }\n \n@@ -104,7 +110,7 @@ internal class GpgAgentConfigurator(private val project: Project, cs: CoroutineS\n       }\n       else if (backupExistingConfig(gpgAgentPaths, config)) {\n         changePinentryProgram(gpgAgentPaths, config)\n-        restartAgent()\n+        restartAgent(executable)\n       }\n     }\n \n@@ -175,9 +181,9 @@ internal class GpgAgentConfigurator(private val project: Project, cs: CoroutineS\n     }\n   }\n \n-  private fun restartAgent() {\n+  private fun restartAgent(executor: GitExecutable) {\n     try {\n-      val output = createGpgAgentExecutor().execute("gpg-connect-agent", "reloadagent /bye").lastOrNull()\n+      val output = createGpgAgentExecutor(executor).execute("gpg-connect-agent", "reloadagent /bye").lastOrNull()\n       if (output == "OK") {\n         LOG.debug("Gpg Agent restarted successfully")\n       }\n@@ -234,6 +240,55 @@ private class MacAndUnixGpgAgentPathsLocator : GpgAgentPathsLocator {\n   }\n }\n \n+private class WslGpgAgentCommandExecutor(private val project: Project,\n+                                         private val executable: GitExecutable.Wsl) : GpgAgentCommandExecutor {\n+  override fun execute(command: String, vararg params: String): List<String> {\n+    val commandLine = executable.createBundledCommandLine(project, command).withParameters(*params)\n+    return CapturingProcessHandler\n+      .Silent(commandLine)\n+      .runProcess(10000, true).stdoutLines\n+  }\n+}\n+\n+private class WslGpgAgentPathsLocator(private val executable: GitExecutable.Wsl) : GpgAgentPathsLocator {\n+  override fun resolvePaths(): GpgAgentPaths? {\n+    try {\n+      val gpgAgentHome = getWindowsAccessibleGpgHome(executable) ?: return null\n+      val gpgAgentConf = gpgAgentHome.resolve(GPG_AGENT_CONF_FILE_NAME)\n+      val gpgAgentConfBackup = gpgAgentHome.resolve(GPG_AGENT_CONF_BACKUP_FILE_NAME)\n+      val gpgPinentryAppLauncher = gpgAgentHome.resolve(PINENTRY_LAUNCHER_FILE_NAME)\n+      val pathToPinentryAppInWsl = (getPathInWslUserHome(executable) ?: return null) + "/$GPG_HOME_DIR/$PINENTRY_LAUNCHER_FILE_NAME"\n+      return GpgAgentPaths(gpgAgentHome, gpgAgentConf, gpgAgentConfBackup, gpgPinentryAppLauncher,\n+                           pathToPinentryAppInWsl)\n+    }\n+    catch (e: InvalidPathException) {\n+      LOG.warn("Cannot resolve path", e)\n+      return null\n+    }\n+  }\n+\n+  private fun getPathInWslUserHome(executable: GitExecutable.Wsl): String? {\n+    val wslDistribution = executable.distribution\n+    val wslUserHomePath = wslDistribution.userHome?.trimEnd(\'/\')\n+    if (wslUserHomePath == null) return null\n+    LOG.debug("User home path in WSL = $wslUserHomePath")\n+\n+    return wslUserHomePath\n+  }\n+\n+  private fun getWindowsAccessibleGpgHome(executable: GitExecutable.Wsl): Path? {\n+    val wslDistribution = executable.distribution\n+    val wslUserHomePath = getPathInWslUserHome(executable)\n+    if (wslUserHomePath != null) {\n+      return Path.of(wslDistribution.getWindowsPath(wslUserHomePath), GPG_HOME_DIR)\n+    }\n+    else {\n+      LOG.warn("Cannot resolve wsl user home path")\n+    }\n+    return null\n+  }\n+}\n+\n internal interface PinentryLauncherGenerator {\n   val executable: GitExecutable\n   fun getScriptTemplate(fallbackPinentryPath: String?): String\n@@ -242,7 +297,14 @@ internal interface PinentryLauncherGenerator {\n     val path = gpgAgentPaths.gpgPinentryAppLauncher\n     try {\n       FileUtil.writeToFile(path.toFile(), getScriptTemplate(fallbackPinentryPath))\n-      NioFiles.setExecutable(path)\n+      val executable = executable\n+      if (executable is GitExecutable.Wsl) {\n+        val launcherConfigPath = gpgAgentPaths.gpgPinentryAppLauncherConfigPath\n+        WslGpgAgentCommandExecutor(project, executable).execute("chmod", "+x", launcherConfigPath)\n+      }\n+      else {\n+        NioFiles.setExecutable(path)\n+      }\n     }\n     catch (e: IOException) {\n       LOG.warn("Cannot generate $path", e)\n\n',
            '40ee9543abb3a6a02b41aa1634c4bbb023d6e685\nf7d1a73f2f9eca256ef94de1b54b29a8be09198b\nDmitry Zhuravlev\n[rdct] vcs: implement pinentry application for requesting GPG key secret (IJPL-149731)GitOrigin-RevId: a06ba8c87946fb3a9b2818996e81e81a4ed90408\n####xxx_next_diff_xxx####\ndiff --git a/plugins/git4idea/resources/META-INF/plugin.xml b/plugins/git4idea/resources/META-INF/plugin.xml\nindex fdf66d68d1a6..07b092b27bf2 100644\n--- a/plugins/git4idea/resources/META-INF/plugin.xml\n+++ b/plugins/git4idea/resources/META-INF/plugin.xml\n@@ -642,6 +642,9 @@\n                  description="Max amount of entry to process from Git reflog to parse recently checkout branches"/>\n     <registryKey key="git.show.recent.checkout.branches" defaultValue="5"\n                  description="Max count of recently checkout branches to show (e.g. in branches tree popup)"/>\n+    <registryKey key="git.commit.gpg.signing.enable.embedded.pinentry" defaultValue="false"\n+                 restartRequired="true"\n+                 description="Enable embedded pinentry application for unlock GPG private key while Git perform commit signing. For remote dev (unix backend) and WSL."/>\n \n     <search.projectOptionsTopHitProvider implementation="git4idea.config.GitOptionsTopHitProvider"/>\n     <vcs name="Git" vcsClass="git4idea.GitVcs" displayName="Git" administrativeAreaName=".git"/>\n@@ -821,6 +824,7 @@\n                         isInCommitToolWindow="true"/>\n     <projectService serviceImplementation="git4idea.stash.GitStashTracker"/>\n     <postStartupActivity implementation="git4idea.stash.ui.GitStashStartupActivity"/>\n+    <postStartupActivity implementation="git4idea.commit.signing.GpgAgentConfiguratorStartupActivity"/>\n \n     <vcs.consoleFolding implementation="git4idea.console.GitConsoleFolding"/>\n     <console.folding implementation="git4idea.console.GitProgressOutputConsoleFolding"/>\ndiff --git a/plugins/git4idea/resources/messages/GitBundle.properties b/plugins/git4idea/resources/messages/GitBundle.properties\nindex d6a634657043..68a10463fb82 100644\n--- a/plugins/git4idea/resources/messages/GitBundle.properties\n+++ b/plugins/git4idea/resources/messages/GitBundle.properties\n@@ -761,6 +761,9 @@ settings.configure.sign.gpg.loading.table.text=Loading\\u2026\n gpg.error.see.documentation.link.text=See GPG setup guide\n gpg.jb.manual.link=Set_up_GPG_commit_signing\n \n+gpg.pinentry.title=Unlock GPG Private Key\n+gpg.pinentry.default.description=Please enter the passphrase to unlock the GPG private key:\n+\n clone.dialog.checking.git.version=Checking Git version\\u2026\n push.dialog.push.tags=Push &tags\n push.dialog.push.tags.combo.current.branch=Current Branch\ndiff --git a/plugins/git4idea/rt/src/git4idea/gpg/CryptoUtils.java b/plugins/git4idea/rt/src/git4idea/gpg/CryptoUtils.java\nnew file mode 100644\nindex 000000000000..2af950f01e78\n--- /dev/null\n+++ b/plugins/git4idea/rt/src/git4idea/gpg/CryptoUtils.java\n@@ -0,0 +1,51 @@\n+// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.\n+package git4idea.gpg;\n+\n+import javax.crypto.Cipher;\n+import java.nio.charset.StandardCharsets;\n+import java.security.*;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Base64;\n+\n+public final class CryptoUtils {\n+\n+  public static KeyPair generateKeyPair() throws NoSuchAlgorithmException {\n+    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");\n+    keyPairGenerator.initialize(2048);\n+    return keyPairGenerator.generateKeyPair();\n+  }\n+\n+  public static String publicKeyToString(PublicKey key) {\n+    byte[] keyBytes = key.getEncoded();\n+    if (keyBytes == null) return null;\n+\n+    return Base64.getEncoder().encodeToString(keyBytes);\n+  }\n+\n+  public static PublicKey stringToPublicKey(String keyStr) {\n+    byte[] keyBytes = Base64.getDecoder().decode(keyStr);\n+    X509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes);\n+    KeyFactory keyFactory;\n+    try {\n+      keyFactory = KeyFactory.getInstance("RSA");\n+      return keyFactory.generatePublic(keySpec);\n+    }\n+    catch (GeneralSecurityException | IllegalArgumentException e) {\n+      return null;\n+    }\n+  }\n+\n+  public static String encrypt(String payload, PrivateKey privateKey) throws GeneralSecurityException {\n+    Cipher cipher = Cipher.getInstance("RSA");\n+    cipher.init(Cipher.ENCRYPT_MODE, privateKey);\n+    return Base64.getEncoder().encodeToString(cipher.doFinal(payload.getBytes(StandardCharsets.UTF_8)));\n+  }\n+\n+  public static String decrypt(String base64EncryptedMessage, PublicKey publicKey) throws GeneralSecurityException {\n+    byte[] encryptedMessage = Base64.getDecoder().decode(base64EncryptedMessage);\n+    Cipher cipher = Cipher.getInstance("RSA");\n+    cipher.init(Cipher.DECRYPT_MODE, publicKey);\n+    byte[] decryptedBytes = cipher.doFinal(encryptedMessage);\n+    return new String(decryptedBytes, StandardCharsets.UTF_8);\n+  }\n+}\ndiff --git a/plugins/git4idea/rt/src/git4idea/gpg/PinentryApp.java b/plugins/git4idea/rt/src/git4idea/gpg/PinentryApp.java\nnew file mode 100644\nindex 000000000000..3f1c238aba41\n--- /dev/null\n+++ b/plugins/git4idea/rt/src/git4idea/gpg/PinentryApp.java\n@@ -0,0 +1,158 @@\n+// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.\n+package git4idea.gpg;\n+\n+import externalApp.ExternalApp;\n+\n+import java.io.*;\n+import java.net.Socket;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.PublicKey;\n+\n+public final class PinentryApp implements ExternalApp {\n+\n+  public static void main(String[] args) throws IOException, URISyntaxException {\n+    boolean shouldLog = isLogEnabled(args);\n+    File logFile = getCurrentDir().resolve("pinentry-app.log").toFile();\n+    File exceptionsLogFile = getCurrentDir().resolve("pinentry-app-exceptions.log").toFile();\n+\n+    try (FileWriter exceptionsWriter = shouldLog ? new FileWriter(exceptionsLogFile, StandardCharsets.UTF_8) : null) {\n+      //noinspection UseOfSystemOutOrSystemErr\n+      try (FileWriter logWriter = shouldLog ? new FileWriter(logFile, StandardCharsets.UTF_8) : null;\n+           BufferedReader reader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));\n+           BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out, StandardCharsets.UTF_8))) {\n+\n+        writer.write("OK Pleased to meet you\\n");\n+        writer.flush();\n+        String keyDescription = null;\n+\n+        while (true) {\n+          String line = reader.readLine();\n+\n+          if (shouldLog) {\n+            logWriter.write(line + "\\n");\n+          }\n+\n+          if (line.startsWith("SETDESC")) {\n+            keyDescription = line;\n+            writer.write("OK\\n");\n+          }\n+          else if (line.startsWith("OPTION")\n+                   || line.startsWith("GETINFO")\n+                   || line.startsWith("SET")) {\n+            writer.write("OK\\n");\n+          }\n+          else if (line.startsWith("GETPIN")) {\n+            try {\n+              String pinentryUserData = System.getenv("PINENTRY_USER_DATA");\n+              if (pinentryUserData == null) {\n+                pinentryUserData = "";\n+              }\n+              String[] pinentryData = pinentryUserData.split(":");\n+\n+              if (pinentryData.length != 3) {\n+                if (shouldLog) {\n+                  exceptionsWriter\n+                    .write("Cannot locate address (<public-key>:<host>:<port>) from env variable PINENTRY_USER_DATA. Got " + pinentryUserData + "\\n");\n+                }\n+                throw new Exception();\n+              }\n+\n+              PublicKey publicKey;\n+              String host;\n+              int port;\n+              try {\n+                String publicKeyStr = pinentryData[0];\n+                publicKey = CryptoUtils.stringToPublicKey(publicKeyStr);\n+                host = pinentryData[1];\n+                port = Integer.parseInt(pinentryData[2]);\n+              }\n+              catch (Exception e) {\n+                if (shouldLog) {\n+                  exceptionsWriter.write("Cannot parse env variable PINENTRY_USER_DATA. Got " + pinentryUserData + "\\n");\n+                  exceptionsWriter.write(getStackTrace(e) + "\\n");\n+                }\n+                throw e;\n+              }\n+\n+              try (Socket clientSocket = new Socket(host, port);\n+                   BufferedWriter socketWriter =\n+                     new BufferedWriter(new OutputStreamWriter(clientSocket.getOutputStream(), StandardCharsets.UTF_8));\n+                   BufferedReader socketReader =\n+                     new BufferedReader(new InputStreamReader(clientSocket.getInputStream(), StandardCharsets.UTF_8))) {\n+                String request = keyDescription != null ? "GETPIN " + keyDescription + "\\n" : "GETPIN\\n";\n+                socketWriter.write(request);\n+                socketWriter.flush();\n+                String response = socketReader.readLine();\n+\n+                if (response.startsWith("D ")) {\n+                  String passphrase = CryptoUtils.decrypt(response.replace("D ", ""), publicKey);\n+                  writer.write("D " + passphrase + "\\n");\n+                  writer.write("OK\\n");\n+                }\n+                else {\n+                  writer.write("ERR 83886179 unknown command<" + response + ">\\n");\n+                }\n+              }\n+            }\n+            catch (Exception e) {\n+              writer.write("ERR 83886179 exception\\n");\n+            }\n+          }\n+          else if (line.startsWith("BYE")) {\n+            writer.write("OK closing connection\\n");\n+            writer.flush();\n+            break;\n+          }\n+          else {\n+            writer.write("ERR 83886179 unknown command <" + line + ">\\n");\n+          }\n+\n+          writer.flush();\n+          if (shouldLog) {\n+            logWriter.flush();\n+            exceptionsWriter.flush();\n+          }\n+        }\n+      }\n+      catch (IOException e) {\n+        if (shouldLog) {\n+          exceptionsWriter.write("Exception occurred: \\n");\n+          exceptionsWriter.write(getStackTrace(e));\n+          exceptionsWriter.flush();\n+        }\n+      }\n+    }\n+  }\n+\n+  private static boolean isLogEnabled(String[] args) {\n+    for (String arg : args) {\n+      if (arg.equals("--log")) {\n+        return true;\n+      }\n+    }\n+\n+    return false;\n+  }\n+\n+  private static Path getCurrentDir() throws URISyntaxException {\n+    URI jarPath = PinentryApp.class.getProtectionDomain().getCodeSource().getLocation().toURI();\n+\n+    return Paths.get(jarPath).getParent();\n+  }\n+\n+  private static String getStackTrace(Exception e) {\n+    StringBuilder sb = new StringBuilder(1000);\n+    StackTraceElement[] st = e.getStackTrace();\n+    sb.append(e.getClass().getName()).append(": ").append(e.getMessage()).append("\\n");\n+\n+    for (StackTraceElement element : st) {\n+      sb.append("\\t at ").append(element.toString()).append("\\n");\n+    }\n+\n+    return sb.toString();\n+  }\n+}\ndiff --git a/plugins/git4idea/src/git4idea/commands/GitHandlerAuthenticationManager.java b/plugins/git4idea/src/git4idea/commands/GitHandlerAuthenticationManager.java\nindex 82517c46762f..2289cabc0093 100644\n--- a/plugins/git4idea/src/git4idea/commands/GitHandlerAuthenticationManager.java\n+++ b/plugins/git4idea/src/git4idea/commands/GitHandlerAuthenticationManager.java\n@@ -1,4 +1,4 @@\n-// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.\n+// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.\n package git4idea.commands;\n \n import com.intellij.externalProcessAuthHelper.*;\n@@ -17,7 +17,10 @@ import com.intellij.openapi.vfs.VirtualFile;\n import com.intellij.util.EnvironmentUtil;\n import externalApp.nativessh.NativeSshAskPassAppHandler;\n import git4idea.GitUtil;\n+import git4idea.commit.signing.GpgAgentConfigurator;\n+import git4idea.commit.signing.PinentryService;\n import git4idea.config.*;\n+import git4idea.config.gpg.GitGpgConfigUtilsKt;\n import git4idea.http.GitAskPassAppHandler;\n import git4idea.repo.GitProjectConfigurationCache;\n import git4idea.repo.GitRepository;\n@@ -65,6 +68,7 @@ public final class GitHandlerAuthenticationManager implements AutoCloseable {\n     GitUtil.tryRunOrClose(manager, () -> {\n       manager.prepareHttpAuth();\n       manager.prepareNativeSshAuth();\n+      manager.prepareGpgAgentAuth();\n       boolean useCredentialHelper = GitVcsApplicationSettings.getInstance().isUseCredentialHelper();\n \n       boolean isConfigCommand = handler.getCommand() == GitCommand.CONFIG;\n@@ -177,6 +181,35 @@ public final class GitHandlerAuthenticationManager implements AutoCloseable {\n     }\n   }\n \n+  private void prepareGpgAgentAuth() throws IOException {\n+    if (!GpgAgentConfigurator.isEnabled(myHandler.myExecutable)) {\n+      return;\n+    }\n+    Project project = myHandler.project();\n+    VirtualFile root = myHandler.getExecutableContext().getRoot();\n+    if (project == null || root == null) {\n+      return;\n+    }\n+\n+    GitCommand command = myHandler.getCommand();\n+    boolean needGpgSigning =\n+      (command == GitCommand.COMMIT || command == GitCommand.TAG || command == GitCommand.MERGE) &&\n+      GitGpgConfigUtilsKt.isGpgSignEnabled(project, root);\n+\n+    if (needGpgSigning) {\n+      PinentryService.PinentryData pinentryData = PinentryService.getInstance(project).startSession();\n+      if (pinentryData != null) {\n+        myHandler.addCustomEnvironmentVariable(PinentryService.PINENTRY_USER_DATA_ENV, pinentryData.toString());\n+        myHandler.addListener(new GitHandlerListener() {\n+          @Override\n+          public void processTerminated(int exitCode) {\n+            PinentryService.getInstance(project).stopSession();\n+          }\n+        });\n+      }\n+    }\n+  }\n+\n   private void addHandlerPathToEnvironment(@NotNull String env,\n                                            @NotNull ExternalProcessHandlerService<?> service) throws IOException {\n     GitExecutable executable = myHandler.getExecutable();\ndiff --git a/plugins/git4idea/src/git4idea/commands/GitScriptGenerator.java b/plugins/git4idea/src/git4idea/commands/GitScriptGenerator.java\nindex 73a249d308df..d7d0f872fccd 100644\n--- a/plugins/git4idea/src/git4idea/commands/GitScriptGenerator.java\n+++ b/plugins/git4idea/src/git4idea/commands/GitScriptGenerator.java\n@@ -1,10 +1,11 @@\n-// Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.\n+// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.\n package git4idea.commands;\n \n import com.intellij.externalProcessAuthHelper.ScriptGeneratorImpl;\n import com.intellij.openapi.util.text.StringUtil;\n import externalApp.ExternalApp;\n import externalApp.nativessh.NativeSshAskPassAppHandler;\n+import git4idea.commit.signing.PinentryService;\n import git4idea.config.GitExecutable;\n import git4idea.editor.GitRebaseEditorAppHandler;\n import git4idea.http.GitAskPassAppHandler;\n@@ -42,7 +43,8 @@ public class GitScriptGenerator extends ScriptGeneratorImpl {\n         GitAskPassAppHandler.IJ_ASK_PASS_HANDLER_ENV,\n         GitAskPassAppHandler.IJ_ASK_PASS_PORT_ENV,\n         GitRebaseEditorAppHandler.IJ_EDITOR_HANDLER_ENV,\n-        GitRebaseEditorAppHandler.IJ_EDITOR_PORT_ENV);\n+        GitRebaseEditorAppHandler.IJ_EDITOR_PORT_ENV,\n+        PinentryService.PINENTRY_USER_DATA_ENV);\n       sb.append("export WSLENV=");\n       sb.append(StringUtil.join(envs, it -> it + "/w", ":"));\n       sb.append("\\n");\ndiff --git a/plugins/git4idea/src/git4idea/commit/signing/GpgAgentConfigurator.kt b/plugins/git4idea/src/git4idea/commit/signing/GpgAgentConfigurator.kt\nnew file mode 100644\nindex 000000000000..e177a53fffd4\n--- /dev/null\n+++ b/plugins/git4idea/src/git4idea/commit/signing/GpgAgentConfigurator.kt\n@@ -0,0 +1,293 @@\n+// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.\n+package git4idea.commit.signing\n+\n+import com.intellij.execution.ExecutionException\n+import com.intellij.execution.configurations.GeneralCommandLine\n+import com.intellij.execution.process.CapturingProcessHandler\n+import com.intellij.idea.AppMode\n+import com.intellij.openapi.Disposable\n+import com.intellij.openapi.components.Service\n+import com.intellij.openapi.components.service\n+import com.intellij.openapi.diagnostic.logger\n+import com.intellij.openapi.project.Project\n+import com.intellij.openapi.startup.ProjectActivity\n+import com.intellij.openapi.util.SystemInfo\n+import com.intellij.openapi.util.io.FileUtil\n+import com.intellij.openapi.util.io.NioFiles\n+import com.intellij.openapi.util.registry.Registry\n+import com.intellij.util.SystemProperties\n+import com.intellij.util.application\n+import com.intellij.util.concurrency.annotations.RequiresBackgroundThread\n+import com.intellij.util.io.write\n+import git4idea.commands.GitScriptGenerator\n+import git4idea.commit.signing.GpgAgentPathsLocator.Companion.GPG_AGENT_CONF_BACKUP_FILE_NAME\n+import git4idea.commit.signing.GpgAgentPathsLocator.Companion.GPG_AGENT_CONF_FILE_NAME\n+import git4idea.commit.signing.GpgAgentPathsLocator.Companion.GPG_HOME_DIR\n+import git4idea.commit.signing.GpgAgentPathsLocator.Companion.PINENTRY_LAUNCHER_FILE_NAME\n+import git4idea.commit.signing.PinentryService.Companion.PINENTRY_USER_DATA_ENV\n+import git4idea.config.GitExecutable\n+import git4idea.config.GitExecutableListener\n+import git4idea.config.GitExecutableManager\n+import git4idea.gpg.PinentryApp\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.Dispatchers\n+import kotlinx.coroutines.launch\n+import kotlinx.coroutines.withContext\n+import org.intellij.lang.annotations.Language\n+import org.jetbrains.annotations.VisibleForTesting\n+import java.io.IOException\n+import java.nio.file.InvalidPathException\n+import java.nio.file.Path\n+import java.nio.file.Paths\n+import kotlin.io.path.copyTo\n+import kotlin.io.path.exists\n+import kotlin.io.path.readLines\n+\n+private val LOG = logger<GpgAgentConfigurator>()\n+\n+@Service(Service.Level.PROJECT)\n+internal class GpgAgentConfigurator(private val project: Project, cs: CoroutineScope): Disposable {\n+  companion object {\n+    const val GPG_AGENT_PINENTRY_PROGRAM_CONF_KEY = "pinentry-program"\n+\n+    @JvmStatic\n+    fun isEnabled(executable: GitExecutable): Boolean {\n+      return Registry.`is`("git.commit.gpg.signing.enable.embedded.pinentry", false) &&\n+             ((AppMode.isRemoteDevHost() && SystemInfo.isUnix)\n+             || executable is GitExecutable.Wsl\n+             || application.isUnitTestMode)\n+    }\n+  }\n+\n+  init {\n+    val connection = application.messageBus.connect(this)\n+    connection.subscribe(GitExecutableManager.TOPIC, GitExecutableListener { cs.launch { configure() }})\n+  }\n+\n+  suspend fun configure() {\n+    withContext(Dispatchers.IO) { doConfigure() }\n+  }\n+\n+  private fun createPathLocator(): GpgAgentPathsLocator {\n+    return MacAndUnixGpgAgentPathsLocator()\n+  }\n+\n+  private fun createGpgAgentExecutor(): GpgAgentCommandExecutor {\n+    return LocalGpgAgentCommandExecutor()\n+  }\n+\n+  @VisibleForTesting\n+  internal fun doConfigure(pathLocator: GpgAgentPathsLocator? = null) {\n+    val executable = GitExecutableManager.getInstance().getExecutable(project)\n+    if (!isEnabled(executable)) return\n+\n+    val gpgAgentPaths = pathLocator?.resolvePaths() ?: createPathLocator().resolvePaths() ?: return\n+    val gpgAgentConf = gpgAgentPaths.gpgAgentConf\n+    var needBackup = gpgAgentConf.exists()\n+    if (!needBackup) {\n+      LOG.debug("Cannot locate $gpgAgentConf, creating new")\n+      gpgAgentConf.write("$GPG_AGENT_PINENTRY_PROGRAM_CONF_KEY ${gpgAgentPaths.gpgPinentryAppLauncherConfigPath}")\n+      restartAgent()\n+      needBackup = false\n+    }\n+\n+    val config = readConfig(gpgAgentConf)\n+    if (config.content.isEmpty()) {\n+      LOG.debug("Empty $gpgAgentConf, skipping pinentry program configuration")\n+      return\n+    }\n+\n+    if (needBackup) {\n+      val gpgAgentConfBackup = gpgAgentPaths.gpgAgentConfBackup\n+      if (gpgAgentConfBackup.exists()) {\n+        LOG.debug("$gpgAgentConfBackup already exist, skipping configuration backup")\n+      }\n+      else if (backupExistingConfig(gpgAgentPaths, config)) {\n+        changePinentryProgram(gpgAgentPaths, config)\n+        restartAgent()\n+      }\n+    }\n+\n+    //always regenerate the launcher to be up to date (e.g., java.home could be changed between versions)\n+    generatePinentryLauncher(executable, gpgAgentPaths)\n+  }\n+\n+  private fun readConfig(gpgAgentConf: Path): GpgAgentConfig {\n+    val config = mutableMapOf<String, String>()\n+    try {\n+      gpgAgentConf.readLines().forEach { line ->\n+        val (key, value) = line.split(\' \')\n+        config[key] = value\n+      }\n+    }\n+    catch (e: IOException) {\n+      LOG.error("Cannot read $gpgAgentConf", e)\n+      return GpgAgentConfig(gpgAgentConf, emptyMap())\n+    }\n+    return GpgAgentConfig(gpgAgentConf, config)\n+  }\n+\n+  private fun generatePinentryLauncher(executable: GitExecutable, gpgAgentPaths: GpgAgentPaths) {\n+    val gpgAgentConfBackup = gpgAgentPaths.gpgAgentConfBackup\n+    val pinentryFallback = when {\n+      gpgAgentConfBackup.exists() -> readConfig(gpgAgentConfBackup).content[GPG_AGENT_PINENTRY_PROGRAM_CONF_KEY]\n+      else -> null\n+    }\n+    if (pinentryFallback.isNullOrBlank()) {\n+      LOG.debug("Pinentry fallback not found in $gpgAgentConfBackup. Skip pinentry script generation.")\n+    }\n+    PinentryShellScriptLauncherGenerator(executable)\n+      .generate(project, gpgAgentPaths, pinentryFallback)\n+  }\n+\n+  private fun backupExistingConfig(gpgAgentPaths: GpgAgentPaths, config: GpgAgentConfig): Boolean {\n+    val pinentryAppLauncherConfigPath = gpgAgentPaths.gpgPinentryAppLauncherConfigPath\n+    if (config.content[GPG_AGENT_PINENTRY_PROGRAM_CONF_KEY] == pinentryAppLauncherConfigPath) {\n+      return false\n+    }\n+    val gpgAgentConf = gpgAgentPaths.gpgAgentConf\n+    val gpgAgentConfBackup = gpgAgentPaths.gpgAgentConfBackup\n+    try {\n+      gpgAgentConf.copyTo(gpgAgentConfBackup, overwrite = true)\n+    }\n+    catch (e: IOException) {\n+      LOG.warn("Cannot backup config $gpgAgentConf to $gpgAgentConfBackup", e)\n+      return false\n+    }\n+    return true\n+  }\n+\n+  private fun changePinentryProgram(gpgAgentPaths: GpgAgentPaths, config: GpgAgentConfig) {\n+    val pinentryAppLauncherConfigPath = gpgAgentPaths.gpgPinentryAppLauncherConfigPath\n+    val (configPath, configContent) = config\n+    try {\n+      FileUtil.writeToFile(configPath.toFile(), configContent.map { (key, value) ->\n+        if (key == GPG_AGENT_PINENTRY_PROGRAM_CONF_KEY) {\n+          "$key $pinentryAppLauncherConfigPath"\n+        }\n+        else {\n+          "$key $value"\n+        }\n+      }.joinToString(separator = "\\n"))\n+    }\n+    catch (e: IOException) {\n+      LOG.error("Cannot change config $configPath", e)\n+    }\n+  }\n+\n+  private fun restartAgent() {\n+    try {\n+      val output = createGpgAgentExecutor().execute("gpg-connect-agent", "reloadagent /bye").lastOrNull()\n+      if (output == "OK") {\n+        LOG.debug("Gpg Agent restarted successfully")\n+      }\n+      else {\n+        LOG.warn("Gpg Agent restart failed, restart manually to apply config changes")\n+      }\n+    }\n+    catch (e: ExecutionException) {\n+      LOG.warn("Gpg Agent restart failed, restart manually to apply config changes", e)\n+    }\n+  }\n+\n+  override fun dispose() {}\n+}\n+\n+internal interface GpgAgentCommandExecutor {\n+  @RequiresBackgroundThread\n+  fun execute(command: String, vararg params: String): List<String>\n+}\n+\n+private class LocalGpgAgentCommandExecutor : GpgAgentCommandExecutor {\n+  override fun execute(command: String, vararg params: String): List<String> {\n+    return CapturingProcessHandler\n+      .Silent(GeneralCommandLine(command).withParameters(*params))\n+      .runProcess(10000, true).stdoutLines\n+  }\n+}\n+\n+internal interface GpgAgentPathsLocator {\n+  companion object {\n+    const val GPG_HOME_DIR = ".gnupg"\n+    const val GPG_AGENT_CONF_FILE_NAME = "gpg-agent.conf"\n+    const val GPG_AGENT_CONF_BACKUP_FILE_NAME = "gpg-agent.conf.bak"\n+    const val PINENTRY_LAUNCHER_FILE_NAME = "pinentry-ide.sh"\n+  }\n+  fun resolvePaths(): GpgAgentPaths?\n+}\n+\n+private class MacAndUnixGpgAgentPathsLocator : GpgAgentPathsLocator {\n+  override fun resolvePaths(): GpgAgentPaths? {\n+    try {\n+      val gpgAgentHome = Paths.get(SystemProperties.getUserHome(), GPG_HOME_DIR)\n+      val gpgAgentConf = gpgAgentHome.resolve(GPG_AGENT_CONF_FILE_NAME)\n+      val gpgAgentConfBackup = gpgAgentHome.resolve(GPG_AGENT_CONF_BACKUP_FILE_NAME)\n+      val gpgPinentryAppLauncher = gpgAgentHome.resolve(PINENTRY_LAUNCHER_FILE_NAME)\n+\n+      return GpgAgentPaths(gpgAgentHome, gpgAgentConf, gpgAgentConfBackup,\n+                           gpgPinentryAppLauncher, gpgPinentryAppLauncher.toAbsolutePath().toString())\n+    }\n+    catch (e: InvalidPathException) {\n+      LOG.warn("Cannot resolve path", e)\n+      return null\n+    }\n+  }\n+}\n+\n+internal interface PinentryLauncherGenerator {\n+  val executable: GitExecutable\n+  fun getScriptTemplate(fallbackPinentryPath: String?): String\n+\n+  fun generate(project: Project, gpgAgentPaths: GpgAgentPaths, fallbackPinentryPath: String?): Boolean {\n+    val path = gpgAgentPaths.gpgPinentryAppLauncher\n+    try {\n+      FileUtil.writeToFile(path.toFile(), getScriptTemplate(fallbackPinentryPath))\n+      NioFiles.setExecutable(path)\n+    }\n+    catch (e: IOException) {\n+      LOG.warn("Cannot generate $path", e)\n+      return false\n+    }\n+    return true\n+  }\n+\n+  fun getCommandLineParameters(): Array<String> {\n+    return if (LOG.isDebugEnabled) arrayOf("--log") else emptyArray()\n+  }\n+}\n+\n+internal class PinentryShellScriptLauncherGenerator(override val executable: GitExecutable) :\n+  GitScriptGenerator(executable), PinentryLauncherGenerator {\n+\n+  @Language("Shell Script")\n+  override fun getScriptTemplate(fallbackPinentryPath: String?): String {\n+    if (fallbackPinentryPath == null) {\n+      return """|#!/bin/sh\n+                |${addParameters(*getCommandLineParameters()).commandLine(PinentryApp::class.java, false)}\n+             """.trimMargin()\n+    }\n+\n+    return """|#!/bin/sh\n+              |if [ -n "${\'$\'}$PINENTRY_USER_DATA_ENV" ]; then\n+              |  ${addParameters(*getCommandLineParameters()).commandLine(PinentryApp::class.java, false)}\n+              |else\n+              |  exec $fallbackPinentryPath "$@"\n+              |fi\n+           """.trimMargin()\n+  }\n+}\n+\n+internal data class GpgAgentPaths(\n+  val gpgAgentHome: Path,\n+  val gpgAgentConf: Path,\n+  val gpgAgentConfBackup: Path,\n+  val gpgPinentryAppLauncher: Path,\n+  val gpgPinentryAppLauncherConfigPath: String,\n+)\n+private data class GpgAgentConfig(val path: Path, val content: Map<String, String>)\n+\n+private class GpgAgentConfiguratorStartupActivity : ProjectActivity {\n+  override suspend fun execute(project: Project) {\n+    project.service<GpgAgentConfigurator>().configure()\n+  }\n+}\ndiff --git a/plugins/git4idea/src/git4idea/commit/signing/PinentryService.kt b/plugins/git4idea/src/git4idea/commit/signing/PinentryService.kt\nnew file mode 100644\nindex 000000000000..87fcaecaafe8\n--- /dev/null\n+++ b/plugins/git4idea/src/git4idea/commit/signing/PinentryService.kt\n@@ -0,0 +1,168 @@\n+// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.\n+package git4idea.commit.signing\n+\n+import com.intellij.openapi.application.EDT\n+import com.intellij.openapi.components.Service\n+import com.intellij.openapi.components.service\n+import com.intellij.openapi.diagnostic.logger\n+import com.intellij.openapi.project.Project\n+import com.intellij.openapi.ui.Messages\n+import com.intellij.openapi.util.NlsSafe\n+import com.intellij.util.net.NetUtils\n+import git4idea.gpg.CryptoUtils\n+import git4idea.i18n.GitBundle\n+import kotlinx.coroutines.*\n+import org.jetbrains.annotations.TestOnly\n+import java.io.IOException\n+import java.net.ServerSocket\n+import java.net.Socket\n+import java.net.SocketException\n+import java.security.KeyPair\n+import java.security.NoSuchAlgorithmException\n+\n+@Service(Service.Level.PROJECT)\n+internal class PinentryService(private val cs: CoroutineScope) {\n+\n+  private var serverSocket: ServerSocket? = null\n+  private var keyPair: KeyPair? = null\n+\n+  private var passwordUiRequester: PasswordUiRequester = DefaultPasswordUiRequester()\n+\n+  @TestOnly\n+  internal fun setUiRequester(requester: PasswordUiRequester) {\n+    passwordUiRequester = requester\n+  }\n+\n+  @Synchronized\n+  fun startSession(): PinentryData? {\n+    val publicKeyStr: String?\n+    try {\n+      val pair = CryptoUtils.generateKeyPair()\n+      publicKeyStr = CryptoUtils.publicKeyToString(pair.public)\n+      if (publicKeyStr == null) {\n+        LOG.warn("Cannot serialize public key")\n+        return null\n+      }\n+      keyPair = pair\n+    }\n+    catch (e: NoSuchAlgorithmException) {\n+      LOG.warn("Cannot generate key pair", e)\n+      return null\n+    }\n+    val address = startServer() ?: return null\n+\n+    return PinentryData(publicKeyStr, address)\n+  }\n+\n+  @Synchronized\n+  fun stopSession() {\n+    stopServer()\n+    keyPair = null\n+  }\n+\n+  @OptIn(ExperimentalCoroutinesApi::class)\n+  private fun startServer(): Address? {\n+    val port = try {\n+      NetUtils.findAvailableSocketPort()\n+    }\n+    catch (e: IOException) {\n+      LOG.warn("Cannot find available port to start", e)\n+      return null\n+    }\n+    val host = NetUtils.getLocalHostString()\n+    serverSocket = ServerSocket(port)\n+    cs.launch(Dispatchers.IO.limitedParallelism(1)) {\n+\n+      serverSocket.use { serverSocket ->\n+        while (isActive) {\n+          try {\n+            val clientSocket = serverSocket?.accept()\n+            if (clientSocket != null) {\n+              launch(Dispatchers.IO) { handleClient(clientSocket) }\n+            }\n+          }\n+          catch (e: SocketException) {\n+            if (serverSocket?.isClosed == true) break\n+\n+            LOG.warn("Socket exception", e)\n+          }\n+        }\n+      }\n+    }\n+\n+    cs.launch {\n+      while (isActive) {\n+        delay(100L)\n+      }\n+    }.invokeOnCompletion {\n+      stopSession()\n+    }\n+\n+    return Address(host, port)\n+  }\n+\n+  private fun stopServer() {\n+    try {\n+      serverSocket?.use(ServerSocket::close)\n+    }\n+    catch (e: IOException) {\n+      LOG.warn("Cannot stop server", e)\n+    }\n+  }\n+\n+  private suspend fun handleClient(clientConnection: Socket) {\n+    clientConnection.use { connection ->\n+      connection.getInputStream().bufferedReader().use { reader ->\n+        connection.getOutputStream().bufferedWriter().use { writer ->\n+          val requestLine = reader.readLine()\n+          val request = requestLine.split(\' \', limit = 3)\n+          if (request.getOrNull(0) == "GETPIN") {\n+            val description = request.getOrNull(2)?.replace("%0A", "\\n")?.replace("%22", "\\"")\n+            val passphrase = withContext(Dispatchers.EDT) {\n+              passwordUiRequester.requestPassword(description)\n+            }\n+            val privateKey = keyPair?.private\n+            if (passphrase != null && privateKey != null) {\n+              val encryptedPassphrase = CryptoUtils.encrypt(passphrase, privateKey)\n+              writer.write("D $encryptedPassphrase\\n")\n+              writer.write("OK\\n")\n+            }\n+            else {\n+              writer.write("ERR 83886178 cancel\\n")\n+            }\n+            writer.flush()\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  internal fun interface PasswordUiRequester {\n+    fun requestPassword(description: @NlsSafe String?): String?\n+  }\n+\n+  private class DefaultPasswordUiRequester() : PasswordUiRequester {\n+    override fun requestPassword(description: @NlsSafe String?): String? {\n+      return Messages.showPasswordDialog(\n+        if (description != null) description else GitBundle.message("gpg.pinentry.default.description"),\n+        GitBundle.message("gpg.pinentry.title"),\n+      )\n+    }\n+  }\n+\n+\n+  data class Address(val host: String, val port: Int) {\n+    override fun toString(): String = "$host:$port"\n+  }\n+\n+  data class PinentryData(val publicKey: String, val address: Address) {\n+    override fun toString(): String = "$publicKey:$address"\n+  }\n+\n+  companion object {\n+    private val LOG = logger<PinentryService>()\n+    const val PINENTRY_USER_DATA_ENV = "PINENTRY_USER_DATA"\n+    @JvmStatic\n+    fun getInstance(project: Project): PinentryService = project.service()\n+  }\n+}\ndiff --git a/plugins/git4idea/src/git4idea/config/gpg/GitGpgConfigUtils.kt b/plugins/git4idea/src/git4idea/config/gpg/GitGpgConfigUtils.kt\nindex 8c21188196c6..37bc246908dc 100644\n--- a/plugins/git4idea/src/git4idea/config/gpg/GitGpgConfigUtils.kt\n+++ b/plugins/git4idea/src/git4idea/config/gpg/GitGpgConfigUtils.kt\n@@ -1,4 +1,4 @@\n-// Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.\n+// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.\n package git4idea.config.gpg\n \n import com.intellij.openapi.diagnostic.logger\n@@ -7,6 +7,7 @@ import com.intellij.openapi.project.Project\n import com.intellij.openapi.util.NlsSafe\n import com.intellij.openapi.util.text.StringUtil\n import com.intellij.openapi.vcs.VcsException\n+import com.intellij.openapi.vfs.VirtualFile\n import git4idea.commands.GitImpl\n import git4idea.config.GitConfigUtil\n import git4idea.repo.GitRepository\n@@ -18,8 +19,8 @@ import kotlinx.coroutines.withContext\n @Throws(VcsException::class)\n private fun readGitGpgConfig(repository: GitRepository): RepoConfig {\n   // TODO: "tag.gpgSign" ?\n-  val isEnabled = GitConfigUtil.getBooleanValue(GitConfigUtil.getValue(repository.project, repository.root, GitConfigUtil.GPG_COMMIT_SIGN))\n-  if (isEnabled != true) return RepoConfig(null)\n+  val isEnabled = isGpgSignEnabled(repository.project, repository.root)\n+  if (!isEnabled) return RepoConfig(null)\n   val keyValue = GitConfigUtil.getValue(repository.project, repository.root, GitConfigUtil.GPG_COMMIT_SIGN_KEY)\n   if (keyValue == null) return RepoConfig(null)\n   return RepoConfig(GpgKey(keyValue.trim()))\n@@ -79,6 +80,16 @@ private fun checkKeyCapabilities(capabilities: String): Boolean {\n   return capabilities.contains("s") || capabilities.contains("S")  // can Sign\n }\n \n+fun isGpgSignEnabled(project: Project, root: VirtualFile): Boolean {\n+  try {\n+    return GitConfigUtil.getBooleanValue(GitConfigUtil.getValue(project, root, GitConfigUtil.GPG_COMMIT_SIGN)) == true\n+  }\n+  catch (e: VcsException) {\n+    logger<GitConfigUtil>().warn("Cannot get gpg.commitSign config value", e)\n+    return false\n+  }\n+}\n+\n @Throws(VcsException::class)\n fun writeGitGpgConfig(repository: GitRepository, gpgKey: GpgKey?) {\n   if (gpgKey != null) {\ndiff --git a/plugins/git4idea/tests/git4idea/commit/signing/PinentryDataEncryptTest.kt b/plugins/git4idea/tests/git4idea/commit/signing/PinentryDataEncryptTest.kt\nnew file mode 100644\nindex 000000000000..7834128ac4aa\n--- /dev/null\n+++ b/plugins/git4idea/tests/git4idea/commit/signing/PinentryDataEncryptTest.kt\n@@ -0,0 +1,31 @@\n+// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.\n+package git4idea.commit.signing\n+\n+import com.intellij.testFramework.UsefulTestCase\n+import com.intellij.util.net.NetUtils\n+import git4idea.gpg.CryptoUtils\n+import kotlin.random.Random\n+\n+class PinentryDataEncryptTest : UsefulTestCase() {\n+\n+  fun `test encrypt and decrypt`() {\n+    val password = PinentryTestUtil.generatePassword(Random.nextInt(2, 200))\n+    val keyPair = CryptoUtils.generateKeyPair()\n+\n+    val encryptedPassword = CryptoUtils.encrypt(password, keyPair.private)\n+    val decryptedPassword = CryptoUtils.decrypt(encryptedPassword, keyPair.public)\n+\n+    assertEquals(password, decryptedPassword)\n+  }\n+\n+  fun `test public key serialization`() {\n+    val publicKey = CryptoUtils.generateKeyPair().public\n+    val address = PinentryService.Address(NetUtils.getLocalHostString(), NetUtils.findAvailableSocketPort())\n+    val pinentryData = PinentryService.PinentryData(CryptoUtils.publicKeyToString(publicKey), address).toString()\n+\n+    val keyToDeserialize = pinentryData.split(\':\')[0]\n+    val deserializedKey = CryptoUtils.stringToPublicKey(keyToDeserialize)\n+\n+    assertEquals(publicKey, deserializedKey)\n+  }\n+}\ndiff --git a/plugins/git4idea/tests/git4idea/commit/signing/PinentryExecutionTest.kt b/plugins/git4idea/tests/git4idea/commit/signing/PinentryExecutionTest.kt\nnew file mode 100644\nindex 000000000000..d937d972a835\n--- /dev/null\n+++ b/plugins/git4idea/tests/git4idea/commit/signing/PinentryExecutionTest.kt\n@@ -0,0 +1,163 @@\n+// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.\n+package git4idea.commit.signing\n+\n+import com.intellij.execution.configurations.GeneralCommandLine\n+import com.intellij.execution.process.CapturingProcessAdapter\n+import com.intellij.execution.process.CapturingProcessHandler\n+import com.intellij.execution.process.ProcessEvent\n+import com.intellij.execution.process.ProcessOutput\n+import com.intellij.execution.process.ProcessOutputTypes\n+import com.intellij.openapi.components.service\n+import com.intellij.openapi.diagnostic.logger\n+import com.intellij.openapi.util.Key\n+import com.intellij.openapi.util.NlsSafe\n+import com.intellij.openapi.util.io.FileUtil\n+import com.intellij.openapi.util.io.IoTestUtil\n+import com.intellij.util.io.createDirectories\n+import git4idea.commit.signing.GpgAgentConfigurator.Companion.GPG_AGENT_PINENTRY_PROGRAM_CONF_KEY\n+import git4idea.commit.signing.GpgAgentPathsLocator.Companion.GPG_AGENT_CONF_BACKUP_FILE_NAME\n+import git4idea.commit.signing.GpgAgentPathsLocator.Companion.GPG_AGENT_CONF_FILE_NAME\n+import git4idea.commit.signing.GpgAgentPathsLocator.Companion.GPG_HOME_DIR\n+import git4idea.commit.signing.GpgAgentPathsLocator.Companion.PINENTRY_LAUNCHER_FILE_NAME\n+import git4idea.config.GitExecutableManager\n+import git4idea.test.GitSingleRepoTest\n+import org.junit.Assume.assumeTrue\n+import java.io.BufferedWriter\n+import java.io.OutputStreamWriter\n+import java.net.BindException\n+import java.nio.charset.StandardCharsets\n+import kotlin.random.Random\n+\n+class PinentryExecutionTest : GitSingleRepoTest() {\n+\n+  override fun setUp() {\n+    super.setUp()\n+    val enabled = GpgAgentConfigurator.isEnabled(GitExecutableManager.getInstance().getExecutable(project))\n+    assumeTrue("GpgAgentConfigurator should be enabled", enabled);\n+  }\n+\n+  fun `test pinentry communication without gpg agent configuration`() {\n+    IoTestUtil.assumeUnix()\n+\n+    val pathLocator = TestGpgPathLocator()\n+    val paths = pathLocator.resolvePaths()!!\n+    project.service<GpgAgentConfigurator>().doConfigure(pathLocator)\n+\n+    requestPasswordAndAssert(paths)\n+  }\n+\n+  fun `test pinentry communication with existing gpg agent configuration`() {\n+    IoTestUtil.assumeUnix()\n+\n+    val pathLocator = TestGpgPathLocator()\n+    val paths = pathLocator.resolvePaths()!!\n+    FileUtil.writeToFile(paths.gpgAgentConf.toFile(), "$GPG_AGENT_PINENTRY_PROGRAM_CONF_KEY /usr/local/bin/pinentry")\n+    project.service<GpgAgentConfigurator>().doConfigure(pathLocator)\n+\n+    requestPasswordAndAssert(paths)\n+  }\n+\n+  fun `test pinentry launcher structure`() {\n+    val pathLocator = TestGpgPathLocator()\n+    val paths = pathLocator.resolvePaths()!!\n+\n+    project.service<GpgAgentConfigurator>().doConfigure(pathLocator)\n+    var scriptContent = FileUtil.loadFile(paths.gpgPinentryAppLauncher.toFile())\n+    assertScriptContentStructure(scriptContent)\n+\n+    FileUtil.delete(paths.gpgPinentryAppLauncher.toFile())\n+    FileUtil.delete(paths.gpgAgentConf.toFile())\n+    FileUtil.delete(paths.gpgAgentConfBackup.toFile())\n+\n+    FileUtil.writeToFile(paths.gpgAgentConf.toFile(), "$GPG_AGENT_PINENTRY_PROGRAM_CONF_KEY /usr/local/bin/pinentry")\n+    project.service<GpgAgentConfigurator>().doConfigure(pathLocator)\n+    scriptContent = FileUtil.loadFile(paths.gpgPinentryAppLauncher.toFile())\n+    assertScriptContentStructure(scriptContent)\n+  }\n+\n+  private fun assertScriptContentStructure(scriptContent: String) {\n+    assertTrue(scriptContent.isNotBlank())\n+    assertFalse(scriptContent.contains("\\r"))\n+    for (line in scriptContent.lines()) {\n+      assertFalse(line.isBlank())\n+      val firstTwoChars = line.take(2)\n+      assertTrue(firstTwoChars.all { it.isWhitespace() }\n+                 || firstTwoChars.all { !it.isWhitespace() })\n+    }\n+  }\n+\n+  private fun requestPasswordAndAssert(paths: GpgAgentPaths) {\n+    PinentryService.getInstance(project).use { pinentryData ->\n+      val keyPassword = PinentryTestUtil.generatePassword(Random.nextInt(2, 200))\n+      setUiRequester { keyPassword }\n+      val output = requestPassword(paths, pinentryData)\n+\n+      val passwordPrefix = "D "\n+      val receivedPassword = output.find { it.startsWith(passwordPrefix) }?.substringAfter(passwordPrefix)\n+      assertEquals("Received $output", keyPassword, receivedPassword)\n+    }\n+  }\n+\n+  private fun PinentryService.use(block: PinentryService.(PinentryService.PinentryData) -> Unit) {\n+    try {\n+      val pinentryData = startSession()\n+      assertNotNull(pinentryData)\n+      block(pinentryData!!)\n+    }\n+    catch (e: BindException) {\n+      logger<PinentryExecutionTest>().warn(e)\n+    }\n+    finally {\n+      stopSession()\n+    }\n+  }\n+\n+  private fun requestPassword(paths: GpgAgentPaths, pinentryData: PinentryService.PinentryData?): List<@NlsSafe String> {\n+    val cmd = GeneralCommandLine(paths.gpgPinentryAppLauncherConfigPath)\n+      .withEnvironment(PinentryService.PINENTRY_USER_DATA_ENV, pinentryData.toString())\n+\n+    val output = object : CapturingProcessHandler.Silent(cmd) {\n+      override fun createProcessAdapter(processOutput: ProcessOutput): CapturingProcessAdapter? {\n+        return object : CapturingProcessAdapter(processOutput) {\n+          val writer = BufferedWriter(OutputStreamWriter(process.outputStream, StandardCharsets.UTF_8))\n+          override fun onTextAvailable(event: ProcessEvent, outputType: Key<*>) {\n+            super.onTextAvailable(event, outputType)\n+            val receivedText = event.text\n+            if (receivedText != null && outputType == ProcessOutputTypes.STDOUT) {\n+              replyOn(receivedText)\n+            }\n+          }\n+\n+          private fun replyOn(text: String) {\n+            if (text.startsWith("OK")) {\n+              writer.write("GETPIN\\n")\n+              writer.flush()\n+            }\n+            if (text.startsWith("D")) {\n+              writer.write("BYE\\n")\n+              writer.flush()\n+            }\n+          }\n+\n+          override fun processTerminated(event: ProcessEvent) {\n+            writer.use { super.processTerminated(event) }\n+          }\n+        }\n+      }\n+    }.runProcess(10000, true).stdoutLines\n+    return output\n+  }\n+\n+  private inner class TestGpgPathLocator : GpgAgentPathsLocator {\n+    override fun resolvePaths(): GpgAgentPaths? {\n+      val gpgAgentHome = projectNioRoot.resolve(GPG_HOME_DIR).createDirectories()\n+      val gpgAgentConf = gpgAgentHome.resolve(GPG_AGENT_CONF_FILE_NAME)\n+      val gpgAgentConfBackup = gpgAgentHome.resolve(GPG_AGENT_CONF_BACKUP_FILE_NAME)\n+      val gpgPinentryAppLauncher = gpgAgentHome.resolve(PINENTRY_LAUNCHER_FILE_NAME)\n+\n+      return GpgAgentPaths(gpgAgentHome, gpgAgentConf, gpgAgentConfBackup,\n+                           gpgPinentryAppLauncher, gpgPinentryAppLauncher.toAbsolutePath().toString())\n+    }\n+\n+  }\n+}\ndiff --git a/plugins/git4idea/tests/git4idea/commit/signing/PinentryTestUtil.kt b/plugins/git4idea/tests/git4idea/commit/signing/PinentryTestUtil.kt\nnew file mode 100644\nindex 000000000000..4fefa803736b\n--- /dev/null\n+++ b/plugins/git4idea/tests/git4idea/commit/signing/PinentryTestUtil.kt\n@@ -0,0 +1,47 @@\n+// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.\n+package git4idea.commit.signing\n+\n+import java.security.SecureRandom\n+\n+object PinentryTestUtil {\n+  private const val UPPERCASE_LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"\n+  private const val LOWERCASE_LETTERS = "abcdefghijklmnopqrstuvwxyz"\n+  private const val DIGITS = "0123456789"\n+  private const val SPECIAL_CHARACTERS = "!@#$%^&*()-_=+[]{}|;:,.<>?/"\n+\n+  const val ALL_CHARACTERS = UPPERCASE_LETTERS + LOWERCASE_LETTERS + DIGITS + SPECIAL_CHARACTERS\n+\n+  private val RANDOM = SecureRandom()\n+\n+  fun generatePassword(length: Int): String {\n+    val password = StringBuilder(length)\n+\n+    //fill first 4 char\n+    password.append(UPPERCASE_LETTERS[RANDOM.nextInt(UPPERCASE_LETTERS.length)])\n+    password.append(LOWERCASE_LETTERS[RANDOM.nextInt(LOWERCASE_LETTERS.length)])\n+    password.append(DIGITS[RANDOM.nextInt(DIGITS.length)])\n+    password.append(SPECIAL_CHARACTERS[RANDOM.nextInt(SPECIAL_CHARACTERS.length)])\n+\n+    //fill last characters randomly\n+    repeat(length - 4) {\n+      password.append(ALL_CHARACTERS[RANDOM.nextInt(ALL_CHARACTERS.length)])\n+    }\n+\n+    require(password.length == length)\n+\n+    return password.toString().shuffle()\n+  }\n+\n+  private fun String.shuffle(): String {\n+    val characters = this.toCharArray()\n+\n+    for (i in characters.indices) {\n+      val randomIndex = RANDOM.nextInt(characters.size)\n+      val temp = characters[i]\n+      characters[i] = characters[randomIndex]\n+      characters[randomIndex] = temp\n+    }\n+\n+    return String(characters)\n+  }\n+}\n\n',
            'c69d5b7c2c8ed6f1ca42e4be1fd378e9e43f72ea\n40ee9543abb3a6a02b41aa1634c4bbb023d6e685\nYuriy Artamonov\n[icons] Eliminate CrossModuleIcons.jsonAll icons reside in the corresponding modules now\n\nGitOrigin-RevId: c5fe0b11a37256d1cae4d2067f17c6802a7721b8\n####xxx_next_diff_xxx####\ndiff --git a/platform/external-system-impl/src/icons/ExternalSystemIcons.java b/platform/external-system-impl/gen/icons/ExternalSystemIcons.java\nsimilarity index 52%\nrename from platform/external-system-impl/src/icons/ExternalSystemIcons.java\nrename to platform/external-system-impl/gen/icons/ExternalSystemIcons.java\nindex 77540364aa05..c86a40370559 100644\n--- a/platform/external-system-impl/src/icons/ExternalSystemIcons.java\n+++ b/platform/external-system-impl/gen/icons/ExternalSystemIcons.java\n@@ -1,4 +1,4 @@\n-// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.\n+// Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.\n package icons;\n \n import com.intellij.ui.IconManager;\n@@ -11,8 +11,8 @@ import javax.swing.*;\n  * DO NOT EDIT IT BY HAND, run "Generate icon classes" configuration instead\n  */\n public final class ExternalSystemIcons {\n-  private static @NotNull Icon load(@NotNull String path, int cacheKey, int flags) {\n-    return IconManager.getInstance().loadRasterizedIcon(path, ExternalSystemIcons.class.getClassLoader(), cacheKey, flags);\n+  private static @NotNull Icon load(@NotNull String expUIPath, @NotNull String path, int cacheKey, int flags) {\n+    return IconManager.getInstance().loadRasterizedIcon(path, expUIPath, ExternalSystemIcons.class.getClassLoader(), cacheKey, flags);\n   }\n-  /** 16x16 */ public static final @NotNull Icon Task = load("icons/task.svg", -1107166924, 0);\n+  /** 16x16 */ public static final @NotNull Icon Task = load("icons/newui/task.svg", "icons/task.svg", -1107166924, 0);\n }\ndiff --git a/platform/external-system-impl/intellij.platform.externalSystem.impl.iml b/platform/external-system-impl/intellij.platform.externalSystem.impl.iml\nindex be7fe4a7fc74..e96e10ca6b4d 100644\n--- a/platform/external-system-impl/intellij.platform.externalSystem.impl.iml\n+++ b/platform/external-system-impl/intellij.platform.externalSystem.impl.iml\n@@ -27,6 +27,7 @@\n     <content url="file://$MODULE_DIR$">\n       <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />\n       <sourceFolder url="file://$MODULE_DIR$/resources" type="java-resource" />\n+      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" generated="true" />\n     </content>\n     <orderEntry type="inheritedJdk" />\n     <orderEntry type="sourceFolder" forTests="false" />\ndiff --git a/platform/external-system-impl/resources/ExternalSystemIconMappings.json b/platform/external-system-impl/resources/ExternalSystemIconMappings.json\nnew file mode 100644\nindex 000000000000..cafc19403ab1\n--- /dev/null\n+++ b/platform/external-system-impl/resources/ExternalSystemIconMappings.json\n@@ -0,0 +1,7 @@\n+{\n+  "icons": {\n+    "newui": {\n+      "task.svg": "icons/task.svg"\n+    }\n+  }\n+}\n\\ No newline at end of file\ndiff --git a/platform/external-system-impl/resources/icons/newui/icon-robots.txt b/platform/external-system-impl/resources/icons/newui/icon-robots.txt\nnew file mode 100644\nindex 000000000000..53c8664db3f1\n--- /dev/null\n+++ b/platform/external-system-impl/resources/icons/newui/icon-robots.txt\n@@ -0,0 +1 @@\n+merge\n\\ No newline at end of file\ndiff --git a/platform/icons/src/expui/build/task.svg b/platform/external-system-impl/resources/icons/newui/task.svg\nsimilarity index 97%\nrename from platform/icons/src/expui/build/task.svg\nrename to platform/external-system-impl/resources/icons/newui/task.svg\nindex 55fcf712900c..c1676b9eebde 100644\n--- a/platform/icons/src/expui/build/task.svg\n+++ b/platform/external-system-impl/resources/icons/newui/task.svg\n@@ -1,4 +1,4 @@\n-<!-- Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->\n+<!-- Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->\n <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">\n <path fill-rule="evenodd" clip-rule="evenodd" d="M3.22655 4.36961C2.92233 4.76924 2.66735 5.20781 2.47037 5.67626L3.30992 7.0943C3.6406 7.65283 3.6406 8.34718 3.30992 8.9057L2.47037 10.3237C2.66736 10.7922 2.92233 11.2308 3.22656 11.6304L4.87261 11.6124C5.52165 11.6053 6.12297 11.9524 6.44133 12.5181L7.24899 13.953C7.49593 13.984 7.74792 14 8.00408 14C8.2602 14 8.51214 13.984 8.75904 13.9531L9.56671 12.5181C9.88507 11.9524 10.4864 11.6053 11.1354 11.6124L12.7816 11.6304C13.0858 11.2308 13.3408 10.7923 13.5377 10.3239L12.6981 8.9057C12.3674 8.34718 12.3674 7.65283 12.6981 7.0943L13.5377 5.67613C13.3408 5.20773 13.0858 4.76921 12.7816 4.36961L11.1354 4.38764C10.4864 4.39475 9.88507 4.04758 9.56671 3.48194L8.75904 2.04693C8.51214 2.01599 8.2602 2 8.00408 2C7.74792 2 7.49594 2.016 7.24899 2.04695L6.44133 3.48194C6.12297 4.04758 5.52165 4.39475 4.87261 4.38764L3.22655 4.36961ZM10.655 8.00001C10.655 9.46412 9.46811 10.651 8.004 10.651C6.5399 10.651 5.353 9.46412 5.353 8.00001C5.353 6.53591 6.5399 5.34902 8.004 5.34902C9.46811 5.34902 10.655 6.53591 10.655 8.00001ZM4.88356 3.3877C5.16752 3.39081 5.4306 3.23892 5.56988 2.99146L6.43817 1.44875C6.54914 1.25159 6.7401 1.1101 6.96387 1.07676C7.30327 1.0262 7.65062 1 8.00408 1C8.3575 1 8.7048 1.02619 9.04414 1.07674C9.26792 1.11007 9.45889 1.25157 9.56986 1.44873L10.4382 2.99146C10.5774 3.23892 10.8405 3.39081 11.1245 3.3877L12.8938 3.36832C13.1196 3.36585 13.3372 3.46012 13.4781 3.63661C13.9099 4.17766 14.2632 4.78416 14.5207 5.43884C14.6034 5.6491 14.5763 5.88489 14.4612 6.07931L13.5586 7.60376C13.4139 7.84811 13.4139 8.15189 13.5586 8.39625L14.4612 9.92069C14.5763 10.1151 14.6034 10.3509 14.5207 10.5612C14.2632 11.2158 13.9099 11.8223 13.4781 12.3634C13.3372 12.5399 13.1196 12.6342 12.8938 12.6317L11.1245 12.6123C10.8405 12.6092 10.5774 12.7611 10.4382 13.0085L9.56986 14.5513C9.45889 14.7484 9.26792 14.8899 9.04414 14.9233C8.7048 14.9738 8.3575 15 8.00408 15C7.65062 15 7.30327 14.9738 6.96387 14.9232C6.7401 14.8899 6.54914 14.7484 6.43817 14.5512L5.56988 13.0085C5.4306 12.7611 5.16752 12.6092 4.88356 12.6123L3.1144 12.6317C2.8886 12.6342 2.67096 12.5399 2.5301 12.3634C2.09822 11.8223 1.74489 11.2158 1.48738 10.561C1.40469 10.3508 1.43184 10.115 1.54695 9.92057L2.44942 8.39625C2.5941 8.15189 2.5941 7.84811 2.44942 7.60376L1.54695 6.07944C1.43184 5.88502 1.40469 5.64924 1.48738 5.43898C1.74489 4.78425 2.09822 4.1777 2.53009 3.63661C2.67096 3.46012 2.8886 3.36585 3.1144 3.36832L4.88356 3.3877ZM9.655 8.00001C9.655 8.91183 8.91582 9.65101 8.004 9.65101C7.09218 9.65101 6.353 8.91183 6.353 8.00001C6.353 7.08819 7.09218 6.34902 8.004 6.34902C8.91582 6.34902 9.655 7.08819 9.655 8.00001Z" fill="#6C707E"/>\n </svg>\ndiff --git a/platform/icons/src/expui/build/task_dark.svg b/platform/external-system-impl/resources/icons/newui/task_dark.svg\nsimilarity index 97%\nrename from platform/icons/src/expui/build/task_dark.svg\nrename to platform/external-system-impl/resources/icons/newui/task_dark.svg\nindex 64f09d927c86..e07345b4992b 100644\n--- a/platform/icons/src/expui/build/task_dark.svg\n+++ b/platform/external-system-impl/resources/icons/newui/task_dark.svg\n@@ -1,4 +1,4 @@\n-<!-- Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->\n+<!-- Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->\n <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">\n <path fill-rule="evenodd" clip-rule="evenodd" d="M3.22655 4.36961C2.92233 4.76924 2.66735 5.20781 2.47037 5.67626L3.30992 7.0943C3.6406 7.65283 3.6406 8.34718 3.30992 8.9057L2.47037 10.3237C2.66736 10.7922 2.92233 11.2308 3.22656 11.6304L4.87261 11.6124C5.52165 11.6053 6.12297 11.9524 6.44133 12.5181L7.24899 13.953C7.49593 13.984 7.74792 14 8.00408 14C8.2602 14 8.51214 13.984 8.75904 13.9531L9.56671 12.5181C9.88507 11.9524 10.4864 11.6053 11.1354 11.6124L12.7816 11.6304C13.0858 11.2308 13.3408 10.7923 13.5377 10.3239L12.6981 8.9057C12.3674 8.34718 12.3674 7.65283 12.6981 7.0943L13.5377 5.67613C13.3408 5.20773 13.0858 4.76921 12.7816 4.36961L11.1354 4.38764C10.4864 4.39475 9.88507 4.04758 9.56671 3.48194L8.75904 2.04693C8.51214 2.01599 8.2602 2 8.00408 2C7.74792 2 7.49594 2.016 7.24899 2.04695L6.44133 3.48194C6.12297 4.04758 5.52165 4.39475 4.87261 4.38764L3.22655 4.36961ZM10.655 8.00001C10.655 9.46412 9.46811 10.651 8.004 10.651C6.5399 10.651 5.353 9.46412 5.353 8.00001C5.353 6.53591 6.5399 5.34902 8.004 5.34902C9.46811 5.34902 10.655 6.53591 10.655 8.00001ZM4.88356 3.3877C5.16752 3.39081 5.4306 3.23892 5.56988 2.99146L6.43817 1.44875C6.54914 1.25159 6.7401 1.1101 6.96387 1.07676C7.30327 1.0262 7.65062 1 8.00408 1C8.3575 1 8.7048 1.02619 9.04414 1.07674C9.26792 1.11007 9.45889 1.25157 9.56986 1.44873L10.4382 2.99146C10.5774 3.23892 10.8405 3.39081 11.1245 3.3877L12.8938 3.36832C13.1196 3.36585 13.3372 3.46012 13.4781 3.63661C13.9099 4.17766 14.2632 4.78416 14.5207 5.43884C14.6034 5.6491 14.5763 5.88489 14.4612 6.07931L13.5586 7.60376C13.4139 7.84811 13.4139 8.15189 13.5586 8.39625L14.4612 9.92069C14.5763 10.1151 14.6034 10.3509 14.5207 10.5612C14.2632 11.2158 13.9099 11.8223 13.4781 12.3634C13.3372 12.5399 13.1196 12.6342 12.8938 12.6317L11.1245 12.6123C10.8405 12.6092 10.5774 12.7611 10.4382 13.0085L9.56986 14.5513C9.45889 14.7484 9.26792 14.8899 9.04414 14.9233C8.7048 14.9738 8.3575 15 8.00408 15C7.65062 15 7.30327 14.9738 6.96387 14.9232C6.7401 14.8899 6.54914 14.7484 6.43817 14.5512L5.56988 13.0085C5.4306 12.7611 5.16752 12.6092 4.88356 12.6123L3.1144 12.6317C2.8886 12.6342 2.67096 12.5399 2.5301 12.3634C2.09822 11.8223 1.74489 11.2158 1.48738 10.561C1.40469 10.3508 1.43184 10.115 1.54695 9.92057L2.44942 8.39625C2.5941 8.15189 2.5941 7.84811 2.44942 7.60376L1.54695 6.07944C1.43184 5.88502 1.40469 5.64924 1.48738 5.43898C1.74489 4.78425 2.09822 4.1777 2.53009 3.63661C2.67096 3.46012 2.8886 3.36585 3.1144 3.36832L4.88356 3.3877ZM9.655 8.00001C9.655 8.91183 8.91582 9.65101 8.004 9.65101C7.09218 9.65101 6.353 8.91183 6.353 8.00001C6.353 7.08819 7.09218 6.34902 8.004 6.34902C8.91582 6.34902 9.655 7.08819 9.655 8.00001Z" fill="#CED0D6"/>\n </svg>\ndiff --git a/platform/icons/src/CrossModuleIcons.json b/platform/icons/src/CrossModuleIcons.json\ndeleted file mode 100644\nindex 77ca3e08e15d..000000000000\n--- a/platform/icons/src/CrossModuleIcons.json\n+++ /dev/null\n@@ -1,23 +0,0 @@\n-{\n-  "expui": {\n-    "build": {\n-      "task.svg": "icons/task.svg"\n-    },\n-    "fileTypes": {\n-      "cucumber.svg": "org/jetbrains/plugins/cucumber/icons/cucumber.svg",\n-      "vueJs.svg": "icons/vue.svg",\n-      "yarn.svg": "icons/nodejs/yarn.svg"\n-    },\n-    "run": {\n-      "forceRunToCursor.svg": "icons/actions/force_run_to_cursor.svg",\n-      "forceStepInto.svg": "icons/actions/force_step_into.svg",\n-      "forceStepOver.svg": "icons/actions/force_step_over.svg"\n-    },\n-    "toolwindows": {\n-      "dependencies.svg": [\n-        "icons/artifact.svg",\n-        "icons/artifactSmall.svg"\n-      ]\n-    }\n-  }\n-}\n\\ No newline at end of file\ndiff --git a/platform/icons/src/PlatformIconMappings.json b/platform/icons/src/PlatformIconMappings.json\nindex 4333a12e25d3..61bf889a4855 100644\n--- a/platform/icons/src/PlatformIconMappings.json\n+++ b/platform/icons/src/PlatformIconMappings.json\n@@ -101,7 +101,6 @@\n       "build.svg": "actions/compile.svg",\n       "dependencyAnalyzer.svg": "actions/dependencyAnalyzer.svg",\n       "rebuild.svg": "actions/rebuild.svg",\n-      "task.svg": "icons/task.svg",\n       "taskGroup.svg": "nodes/configFolder.svg",\n       "toggleOfflineMode.svg": "actions/offlineMode.svg"\n     },\n@@ -217,7 +216,6 @@\n       "contexts.svg": "fileTypes/contexts.svg",\n       "contextsModifier.svg": "fileTypes/contextsModifier.svg",\n       "css.svg": "fileTypes/css.svg",\n-      "cucumber.svg": "org/jetbrains/plugins/cucumber/icons/cucumber.svg",\n       "eclipse.svg": "providers/eclipse.svg",\n       "editorConfig.svg": "nodes/editorconfig.svg",\n       "diagram.svg": "fileTypes/diagram.svg",\n@@ -255,7 +253,6 @@\n       "uiForm.svg": "fileTypes/uiForm.svg",\n       "image.svg": "fileTypes/image.svg",\n       "unknown.svg": "fileTypes/unknown.svg",\n-      "vueJs.svg": "icons/vue.svg",\n       "wsdl.svg": "fileTypes/wsdlFile.svg",\n       "xhtml.svg": "fileTypes/xhtml.svg",\n       "xml.svg": [\n@@ -263,8 +260,7 @@\n         "fileTypes/xml.svg"\n       ],\n       "xsd.svg": "fileTypes/xsdFile.svg",\n-      "yaml.svg": "fileTypes/yaml.svg",\n-      "yarn.svg": "icons/nodejs/yarn.svg"\n+      "yaml.svg": "fileTypes/yaml.svg"\n     },\n     "general": {\n       "inspections": {\n@@ -728,9 +724,9 @@\n       "debug.svg": "actions/startDebugger.svg",\n       "dumpThreads.svg": "actions/dump.svg",\n       "evaluateExpression.svg": "debugger/evaluateExpression.svg",\n-      "forceRunToCursor.svg": "icons/actions/force_run_to_cursor.svg",\n-      "forceStepInto.svg": "icons/actions/force_step_into.svg",\n-      "forceStepOver.svg": "icons/actions/force_step_over.svg",\n+      "forceRunToCursor.svg": "debugger/forceRunToCursor.svg",\n+      "forceStepInto.svg": "debugger/forceStepInto.svg",\n+      "forceStepOver.svg": "debugger/forceStepOver.svg",\n       "killProcess.svg": "debugger/killProcess.svg",\n       "muteBreakpoints.svg": "debugger/muteBreakpoints.svg",\n       "pause.svg": "actions/pause.svg",\n@@ -834,10 +830,6 @@\n       "commit.svg": "toolwindows/toolWindowCommit.svg",\n       "coverage.svg": "toolwindows/toolWindowCoverage.svg",\n       "debug.svg": "toolwindows/toolWindowDebugger.svg",\n-      "dependencies.svg": [\n-        "icons/artifact.svg",\n-        "icons/artifactSmall.svg"\n-      ],\n       "documentation.svg": "toolwindows/documentation.svg",\n       "find.svg": "toolwindows/toolWindowFind.svg",\n       "hierarchy.svg": "toolwindows/toolWindowHierarchy.svg",\ndiff --git a/platform/xdebugger-impl/resources/icons/actions/force_run_to_cursor.svg b/platform/icons/src/debugger/forceRunToCursor.svg\nsimilarity index 100%\nrename from platform/xdebugger-impl/resources/icons/actions/force_run_to_cursor.svg\nrename to platform/icons/src/debugger/forceRunToCursor.svg\ndiff --git a/platform/xdebugger-impl/resources/icons/actions/force_run_to_cursor_dark.svg b/platform/icons/src/debugger/forceRunToCursor_dark.svg\nsimilarity index 100%\nrename from platform/xdebugger-impl/resources/icons/actions/force_run_to_cursor_dark.svg\nrename to platform/icons/src/debugger/forceRunToCursor_dark.svg\ndiff --git a/platform/xdebugger-impl/resources/icons/actions/force_step_into.svg b/platform/icons/src/debugger/forceStepInto.svg\nsimilarity index 100%\nrename from platform/xdebugger-impl/resources/icons/actions/force_step_into.svg\nrename to platform/icons/src/debugger/forceStepInto.svg\ndiff --git a/platform/xdebugger-impl/resources/icons/actions/force_step_into_dark.svg b/platform/icons/src/debugger/forceStepInto_dark.svg\nsimilarity index 100%\nrename from platform/xdebugger-impl/resources/icons/actions/force_step_into_dark.svg\nrename to platform/icons/src/debugger/forceStepInto_dark.svg\ndiff --git a/platform/xdebugger-impl/resources/icons/actions/force_step_over.svg b/platform/icons/src/debugger/forceStepOver.svg\nsimilarity index 100%\nrename from platform/xdebugger-impl/resources/icons/actions/force_step_over.svg\nrename to platform/icons/src/debugger/forceStepOver.svg\ndiff --git a/platform/xdebugger-impl/resources/icons/actions/force_step_over_dark.svg b/platform/icons/src/debugger/forceStepOver_dark.svg\nsimilarity index 100%\nrename from platform/xdebugger-impl/resources/icons/actions/force_step_over_dark.svg\nrename to platform/icons/src/debugger/forceStepOver_dark.svg\ndiff --git a/platform/icons/src/expui/build/toggleSkipTestsMode.svg b/platform/icons/src/expui/build/toggleSkipTestsMode.svg\ndeleted file mode 100644\nindex e446c2e260fd..000000000000\n--- a/platform/icons/src/expui/build/toggleSkipTestsMode.svg\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-<!-- Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->\n-<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">\n-<circle cx="8" cy="8" r="6.5" stroke="#6C707E"/>\n-<path d="M3.5 12.5L12.5 3.5" stroke="#6C707E"/>\n-</svg>\ndiff --git a/platform/icons/src/expui/build/toggleSkipTestsMode_dark.svg b/platform/icons/src/expui/build/toggleSkipTestsMode_dark.svg\ndeleted file mode 100644\nindex a76ff08a36e8..000000000000\n--- a/platform/icons/src/expui/build/toggleSkipTestsMode_dark.svg\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-<!-- Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->\n-<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">\n-<circle cx="8" cy="8" r="6.5" stroke="#CED0D6"/>\n-<path d="M3.5 12.5L12.5 3.5" stroke="#CED0D6"/>\n-</svg>\ndiff --git a/platform/icons/src/expui/fileTypes/cucumber.svg b/platform/icons/src/expui/fileTypes/cucumber.svg\ndeleted file mode 100644\nindex 1070a11d2358..000000000000\n--- a/platform/icons/src/expui/fileTypes/cucumber.svg\n+++ /dev/null\n@@ -1,4 +0,0 @@\n-<!-- Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->\n-<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">\n-<path fill-rule="evenodd" clip-rule="evenodd" d="M11.4178 9.16082C11.2188 9.16082 11.057 9.11436 10.858 9.03204C10.3007 8.78508 9.89516 8.29318 9.77596 7.75784C10.0743 7.55204 10.4437 7.44169 10.8083 7.44927C11.0269 7.45331 11.2462 7.49801 11.455 7.59068C11.6143 7.673 11.7685 7.75027 11.9279 7.87375C12.4852 8.2856 12.1344 9.20198 11.4178 9.16082ZM8.97977 10.8853C8.86008 10.7618 8.78567 10.5994 8.70588 10.4348C8.467 9.85827 8.54924 9.24036 8.86767 8.78735C9.42498 8.91108 9.93481 9.27925 10.1737 9.85574C10.2535 10.0204 10.2983 10.2315 10.2983 10.3964C10.3379 11.0138 9.41764 11.3794 8.97977 10.8853ZM8.63123 3.6782C8.71078 3.51356 8.78567 3.35397 8.90487 3.18933C9.0691 2.98858 9.30407 2.90828 9.5268 2.93202C9.89859 2.97116 10.2483 3.27948 10.2236 3.71684C10.2236 3.88173 10.1788 4.09283 10.099 4.25747C9.8604 4.83397 9.38753 5.20188 8.83046 5.32561C8.47214 4.8726 8.39235 4.25469 8.63123 3.6782ZM7.54916 10.3964C7.46961 10.561 7.39472 10.7206 7.27552 10.8853C6.8773 11.4206 5.95432 11.0448 5.99422 10.3446C5.99422 10.18 6.03901 9.98175 6.11855 9.81711C6.35744 9.24036 6.83006 8.87245 7.38738 8.74897C7.70581 9.24314 7.78804 9.86079 7.54916 10.3964ZM5.35981 9.07067C5.20047 9.15299 4.99903 9.1992 4.7998 9.1992C4.0834 9.24036 3.73511 8.37802 4.25252 7.92526C4.37197 7.80178 4.52616 7.71163 4.7254 7.62931C4.93442 7.53664 5.15348 7.4922 5.37204 7.48765C5.73477 7.48109 6.09065 7.58866 6.39219 7.79673C6.31265 8.33206 5.91712 8.82346 5.35981 9.07067ZM4.67571 4.9524C4.71756 4.95012 4.75526 4.94709 4.80005 4.9524C4.99903 4.9524 5.16082 4.99886 5.35981 5.08118C5.91712 5.32814 6.32268 5.82004 6.44188 6.35537C5.96436 6.68465 5.31991 6.7695 4.76284 6.52254C4.60351 6.44022 4.44906 6.35007 4.28997 6.22659C3.76742 5.80186 4.04791 4.98573 4.67571 4.9524ZM6.62863 2.9704C6.84671 2.94894 7.07384 3.02722 7.23807 3.22797C7.35752 3.35145 7.43217 3.51356 7.51171 3.6782C7.7506 4.25469 7.6686 4.87285 7.34993 5.32561C6.79286 5.20188 6.28279 4.83397 6.0439 4.25747C5.96411 4.09283 5.91957 3.88173 5.91957 3.71684C5.91957 3.30524 6.26516 3.00626 6.62863 2.9704ZM11.0834 1.82485C10.9736 1.75928 10.8625 1.69371 10.7478 1.63625C10.631 1.57786 10.511 1.52063 10.3889 1.47151C10.3504 1.45483 10.3123 1.44 10.2733 1.42424C10.1669 1.38439 10.0595 1.33921 9.9493 1.30654C9.35616 1.10728 8.72172 1 8.06333 1C4.71205 1 2 3.76209 2 7.17503C2 10.1799 4.11502 12.6767 6.90623 13.2321V15C10.5349 14.4428 13.748 11.5092 13.9877 7.65836C14.1319 5.34043 12.9972 2.97408 11.0834 1.82485Z" fill="#00A817"/>\n-</svg>\ndiff --git a/platform/icons/src/expui/fileTypes/vueJs.svg b/platform/icons/src/expui/fileTypes/vueJs.svg\ndeleted file mode 100644\nindex fb1f7dde0523..000000000000\n--- a/platform/icons/src/expui/fileTypes/vueJs.svg\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-<!-- Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->\n-<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">\n-<path d="M9.73205 2.00001L8 5.00001L6.26796 2.00001H0.5L8 14.9905L15.5 2.00001H9.73205Z" fill="#41B883"/>\n-<path d="M9.73204 2L8 5L6.26795 2H3.5L8 9.79416L12.5 2H9.73204Z" fill="#34495E"/>\n-</svg>\ndiff --git a/platform/icons/src/expui/fileTypes/yarn.svg b/platform/icons/src/expui/fileTypes/yarn.svg\ndeleted file mode 100644\nindex 182a23de7fb6..000000000000\n--- a/platform/icons/src/expui/fileTypes/yarn.svg\n+++ /dev/null\n@@ -1,4 +0,0 @@\n-<!-- Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->\n-<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">\n-<path d="M14.1031 12.2043C13.3868 12.3661 12.7124 12.6765 12.1236 13.1153C11.2152 13.6855 10.2337 14.1298 9.20598 14.4364C9.07997 14.5835 8.90575 14.681 8.71446 14.7114C7.64566 14.8634 6.56967 14.9597 5.49086 14.9999C4.90934 15.0044 4.55283 14.8499 4.45383 14.6119C4.41305 14.5155 4.39192 14.4119 4.39167 14.3073C4.39143 14.2026 4.41207 14.099 4.4524 14.0024C4.49273 13.9058 4.55192 13.8182 4.62652 13.7448C4.70113 13.6714 4.78963 13.6136 4.88684 13.5749C4.79595 13.5191 4.70997 13.4557 4.62984 13.3854C4.54433 13.2999 4.45383 13.1283 4.42683 13.1913C4.31433 13.4664 4.25532 14.1384 3.95331 14.4414C3.5383 14.8609 2.75328 14.7209 2.28926 14.4774C1.77975 14.2069 2.32526 13.5709 2.32526 13.5709C2.28159 13.593 2.2339 13.6061 2.18505 13.6095C2.13619 13.6128 2.08717 13.6063 2.04089 13.5903C1.9946 13.5743 1.95202 13.5491 1.91566 13.5163C1.8793 13.4835 1.84991 13.4437 1.82925 13.3994C1.5637 12.956 1.44684 12.4393 1.49574 11.9248C1.62385 11.3607 1.93055 10.8531 2.37026 10.4773C2.301 9.72811 2.41388 8.97331 2.69927 8.27719C3.07621 7.55153 3.61828 6.92451 4.28182 6.44663C4.28182 6.44663 3.31279 5.3731 3.6738 4.40807C3.90831 3.77705 4.00282 3.78155 4.07982 3.75405C4.35208 3.67012 4.60079 3.52333 4.80584 3.32554C5.08172 3.02181 5.42478 2.78677 5.80763 2.63919C6.19049 2.4916 6.60254 2.43555 7.01091 2.47551C7.01091 2.47551 7.59893 0.699453 8.13745 1.04446C8.43536 1.50172 8.69189 1.98465 8.90397 2.48751C8.90397 2.48751 9.54449 2.1135 9.61649 2.253C9.98478 3.23135 10.0753 4.29251 9.878 5.3191C9.64524 6.3043 9.20171 7.22735 8.57796 8.02468C8.51046 8.13719 9.35349 8.4937 9.8855 9.96825C10.377 11.3183 9.9395 12.4483 10.0165 12.5743C10.03 12.5968 10.0345 12.6058 10.0345 12.6058C10.0345 12.6058 10.598 12.6508 11.7301 11.9518C12.3564 11.4943 13.0959 11.217 13.8686 11.1498C14.0072 11.1221 14.1511 11.1498 14.2696 11.227C14.388 11.3041 14.4715 11.4246 14.5021 11.5626C14.5328 11.7005 14.5082 11.845 14.4336 11.9651C14.359 12.0851 14.2404 12.1712 14.1031 12.2048V12.2043Z" fill="#498DB7"/>\n-</svg>\ndiff --git a/platform/platform-resources/src/META-INF/PlatformExtensions.xml b/platform/platform-resources/src/META-INF/PlatformExtensions.xml\nindex c6deb5ba1f4e..dd05d38caa27 100644\n--- a/platform/platform-resources/src/META-INF/PlatformExtensions.xml\n+++ b/platform/platform-resources/src/META-INF/PlatformExtensions.xml\n@@ -659,8 +659,6 @@\n     <themeProvider id="JetBrainsHighContrastTheme" path="/themes/HighContrast.theme.json"/>\n     <bundledColorScheme id="High contrast" path="themes/highContrastScheme.xml"/>\n \n-    <iconMapper mappingFile="CrossModuleIcons.json"/>\n-\n     <themeMetadataProvider path="/themes/metadata/IntelliJPlatform.themeMetadata.json"/>\n     <themeMetadataProvider path="/themes/metadata/JDK.themeMetadata.json"/>\n \ndiff --git a/platform/platform-resources/src/idea/LangActions.xml b/platform/platform-resources/src/idea/LangActions.xml\nindex 3c0a680e18b9..744d26b6f73d 100644\n--- a/platform/platform-resources/src/idea/LangActions.xml\n+++ b/platform/platform-resources/src/idea/LangActions.xml\n@@ -1171,13 +1171,13 @@\n         <group id="DebugReloadGroup"/>\n         <separator/>\n         <action id="StepOver" class="com.intellij.xdebugger.impl.actions.StepOverAction" icon="AllIcons.Actions.TraceOver"/>\n-        <action id="ForceStepOver" class="com.intellij.xdebugger.impl.actions.ForceStepOverAction" icon="PlatformDebuggerImplIcons.Actions.Force_step_over"/>\n+        <action id="ForceStepOver" class="com.intellij.xdebugger.impl.actions.ForceStepOverAction" icon="AllIcons.Debugger.ForceStepOver"/>\n         <action id="StepInto" class="com.intellij.xdebugger.impl.actions.StepIntoAction" icon="AllIcons.Actions.TraceInto"/>\n-        <action id="ForceStepInto" class="com.intellij.xdebugger.impl.actions.ForceStepIntoAction" icon="PlatformDebuggerImplIcons.Actions.Force_step_into"/>\n+        <action id="ForceStepInto" class="com.intellij.xdebugger.impl.actions.ForceStepIntoAction" icon="AllIcons.Debugger.ForceStepInto"/>\n         <action id="SmartStepInto" class="com.intellij.xdebugger.impl.actions.SmartStepIntoAction" icon="AllIcons.Debugger.SmartStepInto"/>\n         <action id="StepOut" class="com.intellij.xdebugger.impl.actions.StepOutAction" icon="AllIcons.Actions.StepOut"/>\n         <action id="RunToCursor" class="com.intellij.xdebugger.impl.actions.RunToCursorAction" icon="AllIcons.Actions.RunToCursor"/>\n-        <action id="ForceRunToCursor" class="com.intellij.xdebugger.impl.actions.ForceRunToCursorAction" icon="PlatformDebuggerImplIcons.Actions.Force_run_to_cursor"/>\n+        <action id="ForceRunToCursor" class="com.intellij.xdebugger.impl.actions.ForceRunToCursorAction" icon="AllIcons.Debugger.ForceRunToCursor"/>\n         <action id="Debugger.PopFrame" class="com.intellij.xdebugger.impl.actions.ResetFrameAction" icon="AllIcons.Actions.InlineDropFrame"/>\n         <action id="Pause" class="com.intellij.xdebugger.impl.actions.PauseAction" icon="AllIcons.Actions.Pause"/>\n         <action id="Resume" class="com.intellij.xdebugger.impl.actions.ResumeAction" icon="AllIcons.Actions.Resume"/>\ndiff --git a/platform/util/ui/api-dump.txt b/platform/util/ui/api-dump.txt\nindex a672f2d9d31e..89f3b9f2bf65 100644\n--- a/platform/util/ui/api-dump.txt\n+++ b/platform/util/ui/api-dump.txt\n@@ -221,10 +221,6 @@ f:com.intellij.icons.AllIcons$Breakpoints\n - sf:MultipleBreakpointsDisabled:javax.swing.Icon\n - sf:MultipleBreakpointsMuted:javax.swing.Icon\n - <init>():V\n-f:com.intellij.icons.AllIcons$Build\n-- sf:Task:javax.swing.Icon\n-- sf:ToggleSkipTestsMode:javax.swing.Icon\n-- <init>():V\n f:com.intellij.icons.AllIcons$Chooser\n - sf:Bottom:javax.swing.Icon\n - sf:Left:javax.swing.Icon\n@@ -322,6 +318,9 @@ f:com.intellij.icons.AllIcons$Debugger\n - sf:Db_watch:javax.swing.Icon\n - sf:EvaluateExpression:javax.swing.Icon\n - sf:EvaluationResult:javax.swing.Icon\n+- sf:ForceRunToCursor:javax.swing.Icon\n+- sf:ForceStepInto:javax.swing.Icon\n+- sf:ForceStepOver:javax.swing.Icon\n - sf:Frame:javax.swing.Icon\n - sf:KillProcess:javax.swing.Icon\n - sf:LambdaBreakpoint:javax.swing.Icon\n@@ -422,7 +421,6 @@ f:com.intellij.icons.AllIcons$FileTypes\n - sf:ContextsModifier:javax.swing.Icon\n - sf:Css:javax.swing.Icon\n - sf:Csv:javax.swing.Icon\n-- sf:Cucumber:javax.swing.Icon\n - sf:Custom:javax.swing.Icon\n - sf:Diagram:javax.swing.Icon\n - sf:Dtd:javax.swing.Icon\n@@ -451,13 +449,11 @@ f:com.intellij.icons.AllIcons$FileTypes\n - sf:Text:javax.swing.Icon\n - sf:UiForm:javax.swing.Icon\n - sf:Unknown:javax.swing.Icon\n-- sf:VueJs:javax.swing.Icon\n - sf:WsdlFile:javax.swing.Icon\n - sf:Xhtml:javax.swing.Icon\n - sf:Xml:javax.swing.Icon\n - sf:XsdFile:javax.swing.Icon\n - sf:Yaml:javax.swing.Icon\n-- sf:Yarn:javax.swing.Icon\n - <init>():V\n f:com.intellij.icons.AllIcons$General\n - sf:ActualZoom:javax.swing.Icon\n@@ -1152,9 +1148,6 @@ f:com.intellij.icons.AllIcons$Providers\n - sf:Yugabyte:javax.swing.Icon\n - <init>():V\n f:com.intellij.icons.AllIcons$Run\n-- sf:ForceRunToCursor:javax.swing.Icon\n-- sf:ForceStepInto:javax.swing.Icon\n-- sf:ForceStepOver:javax.swing.Icon\n - sf:Restart:javax.swing.Icon\n - sf:ShowIgnored:javax.swing.Icon\n - sf:Stop:javax.swing.Icon\ndiff --git a/platform/util/ui/src/com/intellij/icons/AllIcons.java b/platform/util/ui/src/com/intellij/icons/AllIcons.java\nindex c649725e5763..a2cd215618ea 100644\n--- a/platform/util/ui/src/com/intellij/icons/AllIcons.java\n+++ b/platform/util/ui/src/com/intellij/icons/AllIcons.java\n@@ -244,11 +244,6 @@ public class AllIcons {\n     /** 14x14 */ public static final @NotNull Icon MultipleBreakpointsMuted = load("expui/breakpoints/multipleBreakpointsMuted.svg", -1544664600, 2);\n   }\n \n-  public static final class Build {\n-    /** 16x16 */ public static final @NotNull Icon Task = load("expui/build/task.svg", 374995429, 2);\n-    /** 16x16 */ public static final @NotNull Icon ToggleSkipTestsMode = load("expui/build/toggleSkipTestsMode.svg", 1263415235, 2);\n-  }\n-\n   public static final class Chooser {\n     /** 16x16 */ public static final @NotNull Icon Bottom = load("chooser/bottom.svg", -411920834, 2);\n     /** 16x16 */ public static final @NotNull Icon Left = load("chooser/left.svg", 277946192, 2);\n@@ -349,6 +344,9 @@ public class AllIcons {\n     /** 16x16 */ public static final @NotNull Icon Db_watch = load("debugger/db_watch.svg", -1666860072, 0);\n     /** 16x16 */ public static final @NotNull Icon EvaluateExpression = load("expui/run/evaluateExpression.svg", "debugger/evaluateExpression.svg", -1762455063, 2);\n     /** 16x16 */ public static final @NotNull Icon EvaluationResult = load("debugger/evaluationResult.svg", 1466088690, 2);\n+    /** 16x16 */ public static final @NotNull Icon ForceRunToCursor = load("expui/run/forceRunToCursor.svg", "debugger/forceRunToCursor.svg", 1765887966, 2);\n+    /** 16x16 */ public static final @NotNull Icon ForceStepInto = load("expui/run/forceStepInto.svg", "debugger/forceStepInto.svg", -897444087, 2);\n+    /** 16x16 */ public static final @NotNull Icon ForceStepOver = load("expui/run/forceStepOver.svg", "debugger/forceStepOver.svg", 1412423475, 2);\n     /** 16x16 */ public static final @NotNull Icon Frame = load("expui/debugger/frame.svg", "debugger/frame.svg", -388104166, 2);\n     /** 16x16 */ public static final @NotNull Icon KillProcess = load("expui/run/killProcess.svg", "debugger/killProcess.svg", 1100470732, 2);\n     /** 12x12 */ public static final @NotNull Icon LambdaBreakpoint = load("expui/breakpoints/breakpointLambda.svg", "debugger/LambdaBreakpoint.svg", -2130747183, 2);\n@@ -460,7 +458,6 @@ public class AllIcons {\n     /** 16x16 */ public static final @NotNull Icon ContextsModifier = load("expui/fileTypes/contextsModifier.svg", "fileTypes/contextsModifier.svg", 11227132, 0);\n     /** 16x16 */ public static final @NotNull Icon Css = load("expui/fileTypes/css.svg", "fileTypes/css.svg", -1827987051, 0);\n     /** 16x16 */ public static final @NotNull Icon Csv = load("expui/fileTypes/csv.svg", -1498141192, 2);\n-    /** 16x16 */ public static final @NotNull Icon Cucumber = load("expui/fileTypes/cucumber.svg", -374073568, 0);\n     /** 16x16 */ public static final @NotNull Icon Custom = load("expui/fileTypes/text.svg", "fileTypes/custom.svg", 1692794144, 0);\n     /** 16x16 */ public static final @NotNull Icon Diagram = load("expui/fileTypes/diagram.svg", "fileTypes/diagram.svg", 692669001, 0);\n     /** 16x16 */ public static final @NotNull Icon Dtd = load("expui/fileTypes/xml.svg", "fileTypes/dtd.svg", -1804958231, 0);\n@@ -489,13 +486,11 @@ public class AllIcons {\n     /** 16x16 */ public static final @NotNull Icon Text = load("expui/fileTypes/text.svg", "fileTypes/text.svg", -444897274, 0);\n     /** 16x16 */ public static final @NotNull Icon UiForm = load("expui/fileTypes/uiForm.svg", "fileTypes/uiForm.svg", -734581860, 0);\n     /** 16x16 */ public static final @NotNull Icon Unknown = load("expui/fileTypes/unknown.svg", "fileTypes/unknown.svg", 1094896438, 0);\n-    /** 16x16 */ public static final @NotNull Icon VueJs = load("expui/fileTypes/vueJs.svg", -334694159, 0);\n     /** 16x16 */ public static final @NotNull Icon WsdlFile = load("expui/fileTypes/wsdl.svg", "fileTypes/wsdlFile.svg", 85447754, 0);\n     /** 16x16 */ public static final @NotNull Icon Xhtml = load("expui/fileTypes/xhtml.svg", "fileTypes/xhtml.svg", -2145170158, 0);\n     /** 16x16 */ public static final @NotNull Icon Xml = load("expui/fileTypes/xml.svg", "fileTypes/xml.svg", 280641247, 0);\n     /** 16x16 */ public static final @NotNull Icon XsdFile = load("expui/fileTypes/xsd.svg", "fileTypes/xsdFile.svg", -786038641, 0);\n     /** 16x16 */ public static final @NotNull Icon Yaml = load("expui/fileTypes/yaml.svg", "fileTypes/yaml.svg", 118579768, 0);\n-    /** 16x16 */ public static final @NotNull Icon Yarn = load("expui/fileTypes/yarn.svg", 364692861, 0);\n   }\n \n   public static final class General {\n@@ -1228,9 +1223,6 @@ public class AllIcons {\n   }\n \n   public static final class Run {\n-    /** 16x16 */ public static final @NotNull Icon ForceRunToCursor = load("expui/run/forceRunToCursor.svg", -180106702, 2);\n-    /** 16x16 */ public static final @NotNull Icon ForceStepInto = load("expui/run/forceStepInto.svg", 1159944545, 2);\n-    /** 16x16 */ public static final @NotNull Icon ForceStepOver = load("expui/run/forceStepOver.svg", 1517782167, 2);\n     /** 16x16 */ public static final @NotNull Icon Restart = load("expui/run/restart.svg", -275136128, 2);\n     /** 16x16 */ public static final @NotNull Icon ShowIgnored = load("expui/run/showIgnored.svg", 766664095, 2);\n     /** 16x16 */ public static final @NotNull Icon Stop = load("expui/run/stop.svg", 1749021823, 10);\ndiff --git a/platform/xdebugger-impl/src/icons/PlatformDebuggerImplIcons.java b/platform/xdebugger-impl/src/icons/PlatformDebuggerImplIcons.java\nindex 9a9fe26ab86a..62cc510a0598 100644\n--- a/platform/xdebugger-impl/src/icons/PlatformDebuggerImplIcons.java\n+++ b/platform/xdebugger-impl/src/icons/PlatformDebuggerImplIcons.java\n@@ -17,9 +17,6 @@ public final class PlatformDebuggerImplIcons {\n   }\n \n   public static final class Actions {\n-    /** 16x16 */ public static final @NotNull Icon Force_run_to_cursor = load("icons/actions/force_run_to_cursor.svg", -1320997109, 2);\n-    /** 16x16 */ public static final @NotNull Icon Force_step_into = load("icons/actions/force_step_into.svg", 155614706, 2);\n-    /** 16x16 */ public static final @NotNull Icon Force_step_over = load("icons/actions/force_step_over.svg", 795507244, 2);\n     /** 16x16 */ public static final @NotNull Icon Hot_swap = load("icons/actions/hot_swap.svg", -216570490, 2);\n   }\n \ndiff --git a/plugins/ant/resources/icons/task.svg b/plugins/ant/resources/icons/antTask.svg\nsimilarity index 100%\nrename from plugins/ant/resources/icons/task.svg\nrename to plugins/ant/resources/icons/antTask.svg\ndiff --git a/plugins/ant/src/com/intellij/lang/ant/config/execution/MessageTreeRenderer.java b/plugins/ant/src/com/intellij/lang/ant/config/execution/MessageTreeRenderer.java\nindex 365594afdd9d..cfae90b01381 100644\n--- a/plugins/ant/src/com/intellij/lang/ant/config/execution/MessageTreeRenderer.java\n+++ b/plugins/ant/src/com/intellij/lang/ant/config/execution/MessageTreeRenderer.java\n@@ -56,7 +56,7 @@ final class MessageTreeRenderer extends MultilineTreeCellRenderer {\n         icon = AllIcons.Nodes.Target;\n       }\n       else if (type == AntBuildMessageView.MessageType.TASK) {\n-        icon = AntIcons.Task;\n+        icon = AntIcons.AntTask;\n       }\n       else if (type == AntBuildMessageView.MessageType.MESSAGE) {\n         if (node.getPriority() == AntBuildMessageView.PRIORITY_WARN) {\ndiff --git a/plugins/ant/src/icons/AntIcons.java b/plugins/ant/src/icons/AntIcons.java\nindex ba99652e6fa9..4fea6c42cd80 100644\n--- a/plugins/ant/src/icons/AntIcons.java\n+++ b/plugins/ant/src/icons/AntIcons.java\n@@ -18,10 +18,10 @@ public final class AntIcons {\n     return IconManager.getInstance().loadRasterizedIcon(path, expUIPath, AntIcons.class.getClassLoader(), cacheKey, flags);\n   }\n   /** 16x16 */ public static final @NotNull Icon AntBuildXml = load("icons/expui/ant.svg", "icons/AntBuildXml.svg", 1994930586, 2);\n+  /** 16x16 */ public static final @NotNull Icon AntTask = load("icons/antTask.svg", 1295125394, 0);\n   /** 16x16 */ public static final @NotNull Icon Build = load("icons/expui/ant.svg", "icons/build.svg", 2113580401, 0);\n   /** 16x16 */ public static final @NotNull Icon LogDebug = load("icons/logDebug.svg", 1226967148, 0);\n   /** 16x16 */ public static final @NotNull Icon LogVerbose = load("icons/logVerbose.svg", -1085984365, 0);\n   /** 16x16 */ public static final @NotNull Icon MetaTarget = load("icons/metaTarget.svg", 1565197878, 0);\n-  /** 16x16 */ public static final @NotNull Icon Task = load("icons/task.svg", 1155392147, 0);\n   /** 16x16 */ public static final @NotNull Icon Verbose = load("icons/verbose.svg", -124247784, 2);\n }\ndiff --git a/plugins/gradle/java/src/service/resolve/GradleTaskProperty.kt b/plugins/gradle/java/src/service/resolve/GradleTaskProperty.kt\nindex 66a567433786..9d6b438c3bbe 100644\n--- a/plugins/gradle/java/src/service/resolve/GradleTaskProperty.kt\n+++ b/plugins/gradle/java/src/service/resolve/GradleTaskProperty.kt\n@@ -5,7 +5,6 @@ import com.intellij.codeInsight.javadoc.JavaDocInfoGeneratorFactory\n import com.intellij.ide.presentation.Presentation\n import com.intellij.openapi.util.Key\n import com.intellij.psi.OriginInfoAwareElement\n-import com.intellij.psi.PsiClassType\n import com.intellij.psi.PsiElement\n import com.intellij.util.lazyPub\n import icons.ExternalSystemIcons\ndiff --git a/plugins/groovy/src/org/jetbrains/plugins/groovy/gant/ant/AntBuilderMethod.java b/plugins/groovy/src/org/jetbrains/plugins/groovy/gant/ant/AntBuilderMethod.java\nindex 1d64c8d721e8..8b0365baeb88 100644\n--- a/plugins/groovy/src/org/jetbrains/plugins/groovy/gant/ant/AntBuilderMethod.java\n+++ b/plugins/groovy/src/org/jetbrains/plugins/groovy/gant/ant/AntBuilderMethod.java\n@@ -29,7 +29,7 @@ final class AntBuilderMethod extends LightMethodBuilder {\n     myFile = file;\n     myAntClass = antClass;\n     setModifiers(PsiModifier.PUBLIC);\n-    setBaseIcon(AntIcons.Task);\n+    setBaseIcon(AntIcons.AntTask);\n     setMethodReturnType(() -> PsiType.getJavaLangObject(getManager(), getResolveScope()));\n   }\n \ndiff --git a/python/pluginCore/resources/META-INF/plugin.xml b/python/pluginCore/resources/META-INF/plugin.xml\nindex 47499cc9531c..b0a4288c756e 100644\n--- a/python/pluginCore/resources/META-INF/plugin.xml\n+++ b/python/pluginCore/resources/META-INF/plugin.xml\n@@ -854,7 +854,7 @@ The Python plug-in provides smart editing for Python scripts. The feature set of\n \n   <actions>\n     <action overrides="true" id="ForceStepInto" class="com.jetbrains.python.debugger.PyForceStepIntoAction"\n-            icon="PlatformDebuggerImplIcons.Actions.Force_step_into"/>\n+            icon="AllIcons.Debugger.ForceStepInto"/>\n \n     <!-- Console -->\n     <action id="com.jetbrains.python.console.RunPythonOrDebugConsoleAction"\n\n',
            '33cf2fbdfa861ad9a20b8a8cab6cce518fa32359\nc69d5b7c2c8ed6f1ca42e4be1fd378e9e43f72ea\nVladimir Dolzhenko\n[kotlin] Drop redundant check#KTIJ-30855\n\nGitOrigin-RevId: d9ce4fbb6cfe5fee2a01599bbc9d49d3e298b2db\n####xxx_next_diff_xxx####\ndiff --git a/plugins/kotlin/base/analysis/src/org/jetbrains/kotlin/idea/caches/PerModulePackageCacheService.kt b/plugins/kotlin/base/analysis/src/org/jetbrains/kotlin/idea/caches/PerModulePackageCacheService.kt\nindex 65a0b44a8d24..1093136a40dd 100644\n--- a/plugins/kotlin/base/analysis/src/org/jetbrains/kotlin/idea/caches/PerModulePackageCacheService.kt\n+++ b/plugins/kotlin/base/analysis/src/org/jetbrains/kotlin/idea/caches/PerModulePackageCacheService.kt\n@@ -12,7 +12,6 @@ import com.intellij.openapi.progress.ProcessCanceledException\n import com.intellij.openapi.project.IndexNotReadyException\n import com.intellij.openapi.project.Project\n import com.intellij.openapi.project.rootManager\n-import com.intellij.openapi.roots.FileIndexFacade\n import com.intellij.openapi.roots.ModuleRootEvent\n import com.intellij.openapi.roots.ModuleRootListener\n import com.intellij.openapi.util.Key\n@@ -396,7 +395,6 @@ class PerModulePackageCacheService(private val project: Project) : Disposable {\n \n             val service = getInstance(project)\n             val fileManager = PsiManagerEx.getInstanceEx(project).fileManager\n-            val fileIndexFacade = FileIndexFacade.getInstance(project)\n             if (events.size >= FULL_DROP_THRESHOLD) {\n                 service.onTooComplexChange()\n             } else {\n@@ -408,8 +406,7 @@ class PerModulePackageCacheService(private val project: Project) : Disposable {\n                     }\n                     .filter {\n                         val vFile = it.file!!\n-                        vFile.isDirectory ||\n-                                (KotlinFileType.INSTANCE == fileTypeManager.getFileTypeByFileName(vFile.name) && fileIndexFacade.isInContent(vFile))\n+                        vFile.isDirectory || KotlinFileType.INSTANCE == fileTypeManager.getFileTypeByFileName(vFile.name)\n                     }\n                     .filter {\n                         // It expected that content change events will be duplicated with more precise PSI events and processed\n\n',
            '731ac490616cfe78ded04b5b2f5927f797304d21\nc1174c0d0f8c4ab572e0e21f1720f7ae087dd73b\nJinseong Jeon\nKT UAST: add test about source PSI for accessor of delegated property^KT-70458\n\n####xxx_next_diff_xxx####\ndiff --git a/plugins/kotlin/uast/uast-kotlin-base/tests/test/org/jetbrains/uast/test/common/kotlin/UastApiFixtureTestBase.kt b/plugins/kotlin/uast/uast-kotlin-base/tests/test/org/jetbrains/uast/test/common/kotlin/UastApiFixtureTestBase.kt\nindex aa1694d86c29..bc69e597fb3c 100644\n--- a/plugins/kotlin/uast/uast-kotlin-base/tests/test/org/jetbrains/uast/test/common/kotlin/UastApiFixtureTestBase.kt\n+++ b/plugins/kotlin/uast/uast-kotlin-base/tests/test/org/jetbrains/uast/test/common/kotlin/UastApiFixtureTestBase.kt\n@@ -18,6 +18,7 @@ import org.jetbrains.kotlin.psi.KtConstructor\n import org.jetbrains.kotlin.psi.KtDestructuringDeclaration\n import org.jetbrains.kotlin.psi.KtNameReferenceExpression\n import org.jetbrains.kotlin.psi.KtNamedFunction\n+import org.jetbrains.kotlin.psi.KtPropertyAccessor\n import org.jetbrains.kotlin.psi.psiUtil.getParentOfType\n import org.jetbrains.kotlin.util.OperatorNameConventions\n import org.jetbrains.uast.*\n@@ -1184,6 +1185,33 @@ interface UastApiFixtureTestBase {\n         TestCase.assertEquals("Foo", uCallExpression.receiverType?.canonicalText)\n     }\n \n+    fun checkSourcePsiOfLazyPropertyAccessor(myFixture: JavaCodeInsightTestFixture) {\n+        myFixture.configureByText(\n+            "main.kt", """\n+                class Test {\n+                    var prop = "zzz"\n+                        internal get\n+                        private set\n+                    var lazyProp by lazy { setOf("zzz") }\n+                        private get\n+                        internal set\n+                }\n+            """.trimIndent()\n+        )\n+        val uFile = myFixture.file.toUElement()!!\n+        uFile.accept(\n+            object : AbstractUastVisitor() {\n+                override fun visitMethod(node: UMethod): Boolean {\n+                    if (node.isConstructor) {\n+                        return super.visitMethod(node)\n+                    }\n+                    TestCase.assertTrue(node.sourcePsi?.text, node.sourcePsi is KtPropertyAccessor)\n+                    return super.visitMethod(node)\n+                }\n+            }\n+        )\n+    }\n+\n     fun checkTextRangeOfLocalVariable(myFixture: JavaCodeInsightTestFixture) {\n         myFixture.configureByText(\n             "main.kt", """\ndiff --git a/plugins/kotlin/uast/uast-kotlin-fir/tests/test/org/jetbrains/fir/uast/test/FirUastApiFixtureTest.kt b/plugins/kotlin/uast/uast-kotlin-fir/tests/test/org/jetbrains/fir/uast/test/FirUastApiFixtureTest.kt\nindex e09630b24dab..c387476a7694 100644\n--- a/plugins/kotlin/uast/uast-kotlin-fir/tests/test/org/jetbrains/fir/uast/test/FirUastApiFixtureTest.kt\n+++ b/plugins/kotlin/uast/uast-kotlin-fir/tests/test/org/jetbrains/fir/uast/test/FirUastApiFixtureTest.kt\n@@ -142,6 +142,10 @@ class FirUastApiFixtureTest : KotlinLightCodeInsightFixtureTestCase(), UastApiFi\n         checkReceiverTypeOfExtensionFunction(myFixture)\n     }\n \n+    fun testSourcePsiOfLazyPropertyAccessor() {\n+        checkSourcePsiOfLazyPropertyAccessor(myFixture)\n+    }\n+\n     fun testTextRangeOfLocalVariable() {\n         checkTextRangeOfLocalVariable(myFixture)\n     }\ndiff --git a/plugins/kotlin/uast/uast-kotlin/tests/test/org/jetbrains/uast/test/kotlin/comparison/FE1UastApiFixtureTest.kt b/plugins/kotlin/uast/uast-kotlin/tests/test/org/jetbrains/uast/test/kotlin/comparison/FE1UastApiFixtureTest.kt\nindex 79f283b06095..02d93ed6a423 100644\n--- a/plugins/kotlin/uast/uast-kotlin/tests/test/org/jetbrains/uast/test/kotlin/comparison/FE1UastApiFixtureTest.kt\n+++ b/plugins/kotlin/uast/uast-kotlin/tests/test/org/jetbrains/uast/test/kotlin/comparison/FE1UastApiFixtureTest.kt\n@@ -138,6 +138,10 @@ class FE1UastApiFixtureTest : KotlinLightCodeInsightFixtureTestCase(), UastApiFi\n         checkReceiverTypeOfExtensionFunction(myFixture)\n     }\n \n+    fun testSourcePsiOfLazyPropertyAccessor() {\n+        checkSourcePsiOfLazyPropertyAccessor(myFixture)\n+    }\n+\n     fun testTextRangeOfLocalVariable() {\n         checkTextRangeOfLocalVariable(myFixture)\n     }\n\n',
            'a88c9bbaeb94d5333cad80c706ac8697de0a2502\n33cf2fbdfa861ad9a20b8a8cab6cce518fa32359\nDarya.Rovdo\n[ai-completion] ML-3776: Add last 10 tokens featuresGitOrigin-RevId: 8dbd2ebaeddff82264d2dc50bc8448ef6ba92061\n####xxx_next_diff_xxx####\ndiff --git a/platform/ml-impl/src/com/intellij/platform/ml/impl/util.kt b/platform/ml-impl/src/com/intellij/platform/ml/impl/util.kt\nindex 1d286459aa52..9afe98a60cfb 100644\n--- a/platform/ml-impl/src/com/intellij/platform/ml/impl/util.kt\n+++ b/platform/ml-impl/src/com/intellij/platform/ml/impl/util.kt\n@@ -52,7 +52,10 @@ fun interface FeatureDeclarationsExtractor {\n     }\n \n     val ofMapValues = FeatureDeclarationsExtractor { returnClass, propertyValue ->\n-      if (returnClass.isSubclassOf(Map::class)) (propertyValue as Map<*, *>).values.filterIsInstance(FeatureDeclaration::class.java) else null\n+      val mapValues = if (returnClass.isSubclassOf(Map::class)) (propertyValue as Map<*, *>).values else return@FeatureDeclarationsExtractor null\n+      val simpleValues = mapValues.filterIsInstance(FeatureDeclaration::class.java)\n+      val iterValues = mapValues.filterIsInstance(Iterable::class.java).flatMap { it.filterIsInstance(FeatureDeclaration::class.java) }\n+      simpleValues + iterValues\n     }\n   }\n }\n\n',
            'c3e7780bf9ee712419422d8b4c5e59a456e9ace3\na88c9bbaeb94d5333cad80c706ac8697de0a2502\nGregory.Shrago\nmigrate `getData` to `uiDataSnapshot`: SearchSessionGitOrigin-RevId: aa9e5659e6d9f8f1382a9e13622c924b889170ef\n####xxx_next_diff_xxx####\ndiff --git a/platform/lang-impl/api-dump-unreviewed.txt b/platform/lang-impl/api-dump-unreviewed.txt\nindex 97360870e3a3..3f6052efebbc 100644\n--- a/platform/lang-impl/api-dump-unreviewed.txt\n+++ b/platform/lang-impl/api-dump-unreviewed.txt\n@@ -11340,9 +11340,11 @@ f:com.intellij.find.SearchReplaceComponent\n - addListener(com.intellij.find.SearchReplaceComponent$Listener):V\n - addTextToRecent(javax.swing.text.JTextComponent):V\n - s:buildFor(com.intellij.openapi.project.Project,javax.swing.JComponent):com.intellij.find.SearchReplaceComponent$Builder\n+- s:buildFor(com.intellij.openapi.project.Project,javax.swing.JComponent,com.intellij.find.SearchSession):com.intellij.find.SearchReplaceComponent$Builder\n - close():V\n - getProject():com.intellij.openapi.project.Project\n - getReplaceTextComponent():javax.swing.text.JTextComponent\n+- getSearchSession():com.intellij.find.SearchSession\n - getSearchTextComponent():javax.swing.text.JTextComponent\n - getStatusColor():java.awt.Color\n - getStatusText():java.lang.String\ndiff --git a/platform/lang-impl/src/com/intellij/find/EditorSearchSession.java b/platform/lang-impl/src/com/intellij/find/EditorSearchSession.java\nindex ac42751acb21..450252ca20d6 100644\n--- a/platform/lang-impl/src/com/intellij/find/EditorSearchSession.java\n+++ b/platform/lang-impl/src/com/intellij/find/EditorSearchSession.java\n@@ -8,9 +8,7 @@ import com.intellij.find.impl.HelpID;\n import com.intellij.find.impl.livePreview.LivePreviewController;\n import com.intellij.find.impl.livePreview.SearchResults;\n import com.intellij.icons.AllIcons;\n-import com.intellij.ide.DataManager;\n import com.intellij.ide.lightEdit.LightEditCompatible;\n-import com.intellij.ide.ui.IdeUiService;\n import com.intellij.openapi.Disposable;\n import com.intellij.openapi.actionSystem.*;\n import com.intellij.openapi.actionSystem.ex.CustomComponentAction;\n@@ -38,7 +36,6 @@ import com.intellij.ui.ClientProperty;\n import com.intellij.ui.ExperimentalUI;\n import com.intellij.ui.components.ActionLink;\n import com.intellij.util.ArrayUtil;\n-import com.intellij.util.ObjectUtils;\n import com.intellij.util.SmartList;\n import com.intellij.util.ui.ComponentWithEmptyText;\n import com.intellij.util.ui.update.Activatable;\n@@ -100,7 +97,7 @@ public class EditorSearchSession implements SearchSession,\n     myLivePreviewController = new LivePreviewController(mySearchResults, this, myDisposable);\n \n     myComponent = SearchReplaceComponent\n-      .buildFor(project, myEditor.getContentComponent())\n+      .buildFor(project, myEditor.getContentComponent(), this)\n       .addPrimarySearchActions(createPrimarySearchActions())\n       .addExtraSearchActions(new ToggleMatchCase(),\n                              new ToggleWholeWordsOnlyAction(),\n@@ -113,7 +110,6 @@ public class EditorSearchSession implements SearchSession,\n       .addExtraReplaceAction(new TogglePreserveCaseAction())\n       .addReplaceFieldActions(new PrevOccurrenceAction(false),\n                               new NextOccurrenceAction(false))\n-      .withDataProvider(this)\n       .withCloseAction(this::close)\n       .withReplaceAction(this::replaceCurrent)\n       .build();\n@@ -271,10 +267,8 @@ public class EditorSearchSession implements SearchSession,\n   @Nullable\n   public static EditorSearchSession get(@Nullable Editor editor) {\n     JComponent headerComponent = editor != null ? editor.getHeaderComponent() : null;\n-    SearchReplaceComponent searchReplaceComponent = ObjectUtils.tryCast(headerComponent, SearchReplaceComponent.class);\n-    DataContext dataContext = searchReplaceComponent == null ? null :\n-                              IdeUiService.getInstance().createUiDataContext(searchReplaceComponent);\n-    return dataContext == null ? null : SESSION_KEY.getData(dataContext);\n+    SearchSession session = headerComponent instanceof SearchReplaceComponent o ? o.getSearchSession() : null;\n+    return session instanceof EditorSearchSession o ? o : null;\n   }\n \n   @NotNull\ndiff --git a/platform/lang-impl/src/com/intellij/find/SearchReplaceComponent.java b/platform/lang-impl/src/com/intellij/find/SearchReplaceComponent.java\nindex 2982c9cdefe2..a2c37579d4f1 100644\n--- a/platform/lang-impl/src/com/intellij/find/SearchReplaceComponent.java\n+++ b/platform/lang-impl/src/com/intellij/find/SearchReplaceComponent.java\n@@ -82,6 +82,7 @@ public final class SearchReplaceComponent extends EditorHeaderComponent implemen\n \n   private final Project myProject;\n   private final JComponent myTargetComponent;\n+  private final SearchSession mySearchSession;\n   @Nullable private OnePixelSplitter mySplitter;\n \n   private final Runnable myCloseRunnable;\n@@ -104,13 +105,23 @@ public final class SearchReplaceComponent extends EditorHeaderComponent implemen\n \n   private final CloseAction myCloseAction = new CloseAction();\n \n+  @NotNull\n+  public static Builder buildFor(@Nullable Project project,\n+                                 @NotNull JComponent component,\n+                                 @Nullable SearchSession session) {\n+    return new Builder(project, component, session);\n+  }\n+\n+  /** @deprecated Use {@link #buildFor(Project, JComponent, SearchSession)} instead */\n+  @Deprecated(forRemoval = true)\n   @NotNull\n   public static Builder buildFor(@Nullable Project project, @NotNull JComponent component) {\n-    return new Builder(project, component);\n+    return new Builder(project, component, null);\n   }\n \n   private SearchReplaceComponent(@Nullable Project project,\n                                  @NotNull JComponent targetComponent,\n+                                 @Nullable SearchSession searchSession,\n                                  @NotNull DefaultActionGroup searchToolbar1Actions,\n                                  @NotNull DefaultActionGroup searchToolbar2Actions,\n                                  @NotNull DefaultActionGroup searchFieldActions,\n@@ -129,6 +140,7 @@ public final class SearchReplaceComponent extends EditorHeaderComponent implemen\n                                  boolean showSeparator) {\n     myProject = project;\n     myTargetComponent = targetComponent;\n+    mySearchSession = searchSession;\n     mySearchFieldActions = searchFieldActions;\n     myReplaceFieldActions = replaceFieldActions;\n     myReplaceRunnable = replaceRunnable;\n@@ -394,6 +406,8 @@ public final class SearchReplaceComponent extends EditorHeaderComponent implemen\n   @Override\n   public void uiDataSnapshot(@NotNull DataSink sink) {\n     sink.set(PlatformDataKeys.SPEED_SEARCH_TEXT, mySearchTextComponent.getText());\n+    sink.set(SearchSession.KEY, mySearchSession);\n+    DataSink.uiDataSnapshot(sink, mySearchSession);\n     DataSink.uiDataSnapshot(sink, myDataProviderDelegate);\n   }\n \n@@ -401,6 +415,10 @@ public final class SearchReplaceComponent extends EditorHeaderComponent implemen\n     return myProject;\n   }\n \n+  public SearchSession getSearchSession() {\n+    return mySearchSession;\n+  }\n+\n   public void addListener(@NotNull Listener listener) {\n     myEventDispatcher.addListener(listener);\n   }\n@@ -745,6 +763,7 @@ public final class SearchReplaceComponent extends EditorHeaderComponent implemen\n   public static final class Builder {\n     private final Project myProject;\n     private final JComponent myTargetComponent;\n+    private final SearchSession mySearchSession;\n \n     private DataProvider myDataProvider;\n \n@@ -768,12 +787,15 @@ public final class SearchReplaceComponent extends EditorHeaderComponent implemen\n \n     private SearchComponentMode myMode;\n \n-    private Builder(@Nullable Project project, @NotNull JComponent component) {\n+    private Builder(@Nullable Project project, @NotNull JComponent component, @Nullable SearchSession searchSession) {\n       myProject = project;\n       myTargetComponent = component;\n+      mySearchSession = searchSession;\n       myMode = new TextAreaMode();\n     }\n \n+    /** @deprecated Use searchSession and {@link SearchReplaceComponent#buildFor(Project, JComponent, SearchSession)} */\n+    @Deprecated(forRemoval = true)\n     @NotNull\n     public Builder withDataProvider(@NotNull DataProvider provider) {\n       myDataProvider = provider;\n@@ -852,6 +874,7 @@ public final class SearchReplaceComponent extends EditorHeaderComponent implemen\n     public SearchReplaceComponent build() {\n       return new SearchReplaceComponent(myProject,\n                                         myTargetComponent,\n+                                        mySearchSession,\n                                         mySearchActions,\n                                         myExtraSearchActions,\n                                         mySearchFieldActions,\ndiff --git a/platform/vcs-impl/src/com/intellij/openapi/diff/impl/combined/search/CombinedEditorSearchSession.kt b/platform/vcs-impl/src/com/intellij/openapi/diff/impl/combined/search/CombinedEditorSearchSession.kt\nindex 03a7529ffbed..887434df36d9 100644\n--- a/platform/vcs-impl/src/com/intellij/openapi/diff/impl/combined/search/CombinedEditorSearchSession.kt\n+++ b/platform/vcs-impl/src/com/intellij/openapi/diff/impl/combined/search/CombinedEditorSearchSession.kt\n@@ -9,7 +9,8 @@ import com.intellij.find.impl.livePreview.SearchResults\n import com.intellij.find.impl.livePreview.SearchResults.SearchResultsListener\n import com.intellij.openapi.Disposable\n import com.intellij.openapi.actionSystem.AnAction\n-import com.intellij.openapi.actionSystem.DataProvider\n+import com.intellij.openapi.actionSystem.DataSink\n+import com.intellij.openapi.actionSystem.UiDataProvider\n import com.intellij.openapi.application.ApplicationBundle\n import com.intellij.openapi.editor.Editor\n import com.intellij.openapi.editor.EditorFactory\n@@ -30,7 +31,8 @@ internal class CombinedEditorSearchSession(private val project: Project,\n                                            private var currentEditor: Editor,\n                                            private val closeAction: () -> Unit,\n                                            parentComponent: JComponent,\n-                                           disposableParent: Disposable) : SearchSession {\n+                                           disposableParent: Disposable\n+) : SearchSession, UiDataProvider {\n \n   private val disposable = Disposer.newCheckedDisposable().also {\n     Disposer.register(it, this::close)\n@@ -71,7 +73,7 @@ internal class CombinedEditorSearchSession(private val project: Project,\n   }\n \n   init {\n-    searchComponent = SearchReplaceComponent.buildFor(project, parentComponent)\n+    searchComponent = SearchReplaceComponent.buildFor(project, parentComponent, this)\n       .addPrimarySearchActions(*createPrimarySearchActions())\n       .addExtraSearchActions(\n         ToggleMatchCase(),\n@@ -81,7 +83,6 @@ internal class CombinedEditorSearchSession(private val project: Project,\n       .addExtraReplaceAction(TogglePreserveCaseAction())\n       .addReplaceFieldActions(PrevOccurrenceAction(false),\n                               NextOccurrenceAction(false))\n-      .withDataProvider(MyDataProvider())\n       .withCloseAction(::close)\n       .build()\n \n@@ -376,13 +377,9 @@ internal class CombinedEditorSearchSession(private val project: Project,\n     }\n   }\n \n-  private inner class MyDataProvider : DataProvider {\n-    override fun getData(dataId: String): Any? {\n-      return when {\n-        SearchSession.KEY.`is`(dataId) -> this@CombinedEditorSearchSession\n-        else -> currentSession.getData(dataId)\n-      }\n-    }\n+  override fun uiDataSnapshot(sink: DataSink) {\n+    DataSink.uiDataSnapshot(sink, currentSession)\n+    sink[SearchSession.KEY] = this\n   }\n \n   private class WiderStatusTextAction : StatusTextAction() {\ndiff --git a/plugins/terminal/src/org/jetbrains/plugins/terminal/block/output/BlockTerminalSearchSession.kt b/plugins/terminal/src/org/jetbrains/plugins/terminal/block/output/BlockTerminalSearchSession.kt\nindex 3cf33efd1da8..e9f9071be4ee 100644\n--- a/plugins/terminal/src/org/jetbrains/plugins/terminal/block/output/BlockTerminalSearchSession.kt\n+++ b/plugins/terminal/src/org/jetbrains/plugins/terminal/block/output/BlockTerminalSearchSession.kt\n@@ -9,7 +9,6 @@ import com.intellij.find.impl.livePreview.LivePreview\n import com.intellij.find.impl.livePreview.LivePreviewController\n import com.intellij.find.impl.livePreview.LivePreviewPresentation\n import com.intellij.find.impl.livePreview.SearchResults\n-import com.intellij.openapi.actionSystem.DataProvider\n import com.intellij.openapi.actionSystem.ex.TooltipDescriptionProvider\n import com.intellij.openapi.application.ApplicationBundle\n import com.intellij.openapi.application.invokeLater\n@@ -46,7 +45,7 @@ internal class BlockTerminalSearchSession(\n   private val outputModel: TerminalOutputModel,\n   private val selectionModel: TerminalSelectionModel,\n   private val closeCallback: () -> Unit = {}\n-) : SearchSession, SearchResults.SearchResultsListener, SearchReplaceComponent.Listener, DataProvider {\n+) : SearchSession, SearchResults.SearchResultsListener, SearchReplaceComponent.Listener {\n   private val disposable = Disposer.newDisposable(BlockTerminalSearchSession::class.java.name)\n   private val component: SearchReplaceComponent = createSearchComponent()\n   private val searchResults: SearchResults = TerminalSearchResults()\n@@ -102,11 +101,10 @@ internal class BlockTerminalSearchSession(\n \n   private fun createSearchComponent(): SearchReplaceComponent {\n     return SearchReplaceComponent\n-      .buildFor(project, editor.contentComponent)\n+      .buildFor(project, editor.contentComponent, this)\n       .addPrimarySearchActions(StatusTextAction(), PrevOccurrenceAction(), NextOccurrenceAction())\n       .addExtraSearchActions(SearchInBlockAction(), ToggleMatchCase(), ToggleRegex())\n       .withNewLineButton(false)\n-      .withDataProvider(this)\n       .withCloseAction(this::close)\n       .build().also {\n         (it.searchTextComponent as? JTextArea)?.columns = 14  // default is 12\n@@ -252,10 +250,6 @@ internal class BlockTerminalSearchSession(\n     closeCallback()\n   }\n \n-  override fun getData(dataId: String): Any? {\n-    return if (SearchSession.KEY.`is`(dataId)) this else null\n-  }\n-\n   private class TerminalSearchPresentation(private val editor: Editor) : LivePreviewPresentation {\n     override val defaultAttributes: TextAttributes\n       get() = editor.colorsScheme.getAttributes(BlockTerminalColors.SEARCH_ENTRY) ?: TextAttributes()\ndiff --git a/plugins/terminal/src/org/jetbrains/plugins/terminal/search/TerminalSearchSession.kt b/plugins/terminal/src/org/jetbrains/plugins/terminal/search/TerminalSearchSession.kt\nindex bf9db42a3973..bdffe1f85b4a 100644\n--- a/plugins/terminal/src/org/jetbrains/plugins/terminal/search/TerminalSearchSession.kt\n+++ b/plugins/terminal/src/org/jetbrains/plugins/terminal/search/TerminalSearchSession.kt\n@@ -6,7 +6,6 @@ import com.intellij.find.editorHeaderActions.NextOccurrenceAction\n import com.intellij.find.editorHeaderActions.PrevOccurrenceAction\n import com.intellij.find.editorHeaderActions.StatusTextAction\n import com.intellij.find.editorHeaderActions.ToggleMatchCase\n-import com.intellij.openapi.actionSystem.DataProvider\n import com.intellij.openapi.application.ApplicationBundle\n import com.intellij.openapi.wm.IdeFocusManager\n import com.intellij.terminal.JBTerminalWidget\n@@ -19,7 +18,7 @@ import java.awt.event.KeyListener\n import java.util.concurrent.CopyOnWriteArrayList\n import javax.swing.JComponent\n \n-internal class TerminalSearchSession(private val terminalWidget: JBTerminalWidget) : SearchSession, DataProvider {\n+internal class TerminalSearchSession(private val terminalWidget: JBTerminalWidget) : SearchSession {\n   private val searchComponent: SearchReplaceComponent = createSearchComponent()\n   private val findModel: FindModel = createFindModel()\n   private var hasMatches: Boolean = false\n@@ -76,17 +75,12 @@ internal class TerminalSearchSession(private val terminalWidget: JBTerminalWidge\n     IdeFocusManager.getInstance(project).requestFocus(terminalWidget.terminalPanel, false)\n   }\n \n-  override fun getData(dataId: String): Any? {\n-    return if (SearchSession.KEY.`is`(dataId)) this else null\n-  }\n-\n   private fun createSearchComponent(): SearchReplaceComponent {\n     return SearchReplaceComponent\n-      .buildFor(project, terminalWidget.terminalPanel)\n+      .buildFor(project, terminalWidget.terminalPanel, this)\n       .addExtraSearchActions(ToggleMatchCase())\n       .addPrimarySearchActions(StatusTextAction(), PrevOccurrenceAction(), NextOccurrenceAction())\n       .withCloseAction { close() }\n-      .withDataProvider(this)\n       .build().also {\n         it.addListener(object : SearchReplaceComponent.Listener {\n           override fun searchFieldDocumentChanged() {\n\n']
        self.cherry_messages = ["", "(cherry picked from commit 33299ac78503b3871b4a04f9def02497848eef57)",
                                "(cherry picked from commit 33299ac78503b3871b4a04f9def02497848eef57)\n(cherry picked from commit 11119ac78503b3871b4a04f9def02497848eef57)"]
        self.diff_marker = '####xxx_next_diff_xxx####'
        self.test_commit = commit.Commit(self.commit_strings[0], self.diff_marker)
        self.test_commit2 = commit.Commit(self.commit_strings[3], self.diff_marker)

    def test_is_similar_bitmask(self):
        bm1, bm2 = None, 1
        self.assertEqual((False, None), commit.is_similar_bitmask(bm1, bm2))
        bm1, bm2 = -12321, None
        self.assertEqual((False, None), commit.is_similar_bitmask(bm1, bm2))

        for i in range(100):
            bm1 = random.randint(0, 2 ** commit.bit_mask_length)
            bm2 = random.randint(0, 2 ** commit.bit_mask_length)
            self.assertEqual((True, 1.0), commit.is_similar_bitmask(bm1, bm1))
            self.assertEqual((True, 1.0), commit.is_similar_bitmask(bm2, bm2))

            bbm1, bbm2 = f"{bm1:0{commit.bit_mask_length}b}", f"{bm2:0{commit.bit_mask_length}b}"
            bit_sim = sum([1 for (b1, b2) in zip(bbm1, bbm2) if b1 == b2]) / commit.bit_mask_length
            self.assertEqual((bit_sim > commit.min_bit_similarity, bit_sim), commit.is_similar_bitmask(bm1, bm2))

    def test_rotate_left(self):
        for i in range(100):
            r = random.randint(0, 2 ** (commit.bit_mask_length - 1))
            self.assertEqual(commit.rotate_left(r), 2 * r)

            rot = r
            for j in range(commit.bit_mask_length):
                rot = commit.rotate_left(rot)
            self.assertEqual(rot, r)

    def test_count_same_bits(self):
        for i in range(100):
            r = random.randint(0, 2 ** commit.bit_mask_length)
            self.assertEqual(commit.count_same_bits(r, r), commit.bit_mask_length)
        for i in range(100):
            r = random.randint(0, 2 ** commit.bit_mask_length)
            s = random.randint(0, 2 ** commit.bit_mask_length)
            rbin = format(r, '0' + str(commit.bit_mask_length) + 'b')
            sbin = format(s, '0' + str(commit.bit_mask_length) + 'b')
            self.assertEqual(commit.count_same_bits(r, s), sum([rbin[i] == sbin[i] for i in range(commit.bit_mask_length)]))

    def test_sim_hash_weighted(self):
        assert (np.all(commit.sim_hash_weighted(commit.all_ones, 5) == np.ones(commit.bit_mask_length) * 5))
        assert (np.all(commit.sim_hash_weighted(0, 100) == np.zeros(commit.bit_mask_length) * 100))

        weight = 7
        r = int('10' * (commit.bit_mask_length // 2), 2)
        s = np.zeros(commit.bit_mask_length)
        for i in range(commit.bit_mask_length):
            if i % 2:
                s[i] = -weight
            else:
                s[i] = weight
        assert (np.all(commit.sim_hash_weighted(r, weight) == s))

        weight = 1
        r = int('01' * (commit.bit_mask_length // 2), 2)
        s = np.zeros(commit.bit_mask_length)
        for i in range(1, commit.bit_mask_length):
            if i % 2:
                s[i] = weight
            else:
                s[i] = -weight
        assert (np.all(commit.sim_hash_weighted(r, weight) == s))

    def test_sim_hash_sum_to_bit_mask(self):
        for i in range(100):
            vector = np.zeros(commit.bit_mask_length)
            gz = 0
            for j in range(commit.bit_mask_length):
                vector[j] = random.randint(0, 2 ** commit.bit_mask_length) - random.randint(0, 2 ** commit.bit_mask_length)
                if vector[j] >= 0:
                    gz += 1
            self.assertEqual(commit.count_same_bits(commit.sim_hash_sum_to_bit_mask(vector), commit.all_ones), gz)

    def test_mingle_shingles(self):
        test_list = [("a", 1), ("b", 2), ("c", 3), ("d", 4)]
        self.assertEqual(commit.mingle_shingles(test_list, 1), test_list)
        self.assertEqual(commit.mingle_shingles(test_list, 2), [('ab', 1), ('bc', 2), ('cd', 3)])
        self.assertEqual(commit.mingle_shingles(test_list, 3), [('abc', 2), ('bcd', 3)])
        self.assertEqual(commit.mingle_shingles(test_list, 4), [('abcd', 2)])

        test_list = [("a", 1), ("", 2), ("c", 3), ("d", 4)]
        self.assertEqual(commit.mingle_shingles(test_list, 1), test_list)
        self.assertEqual(commit.mingle_shingles(test_list, 2), [('a', 1), ('c', 2), ('cd', 3)])
        self.assertEqual(commit.mingle_shingles(test_list, 3), [('ac', 2), ('cd', 3)])
        self.assertEqual(commit.mingle_shingles(test_list, 4), [('acd', 2)])

    def test_get_hunk_strings(self):
        w_context, w_body = 1, 10
        Hunk_line = namedtuple('line', ['value', 'is_context', 'is_added', 'is_removed'])
        hunk = [Hunk_line(value=str(i), is_context=i % 3 == 0, is_added=i % 3 == 1, is_removed=i % 3 == 2) for i in range(10)]
        self.assertEqual(commit.get_hunk_strings(hunk, w_context, w_body, True),
                         [('0', 1), ('+1', 10), ('-2', 10), ('3', 1), ('+4', 10), ('-5', 10), ('6', 1), ('+7', 10), ('-8', 10), ('9', 1)])

        Hunk_line = namedtuple('line', ['value', 'is_context', 'is_added', 'is_removed', 'UNKNOWN_TYPE', 'line_type'])
        hunk = [Hunk_line(value=str(i), is_context=i % 4 == 0, is_added=i % 4 == 1, is_removed=i % 4 == 2, UNKNOWN_TYPE=i % 4 == 3, line_type="my_line") for i in
                range(10)]
        self.assertRaises(unidiff.UnidiffParseError, commit.get_hunk_strings, hunk, w_context, w_body, True)

    def test_init(self):
        for i in range(len(self.commit_strings)):
            commit_str = self.commit_strings[i]
            c = commit.Commit(commit_str, self.diff_marker)
            # self.assertEqual(c.date, 2**commit.bit_mask_length - i)
            self.assertTrue(len(c.author) > 10)
            self.assertTrue(0 <= c.bit_mask <= 2 ** commit.bit_mask_length)
            self.assertEqual(c.explicit_cherries, [])
            self.assertTrue(len(c.commit_id) == 40)
            self.assertEqual(c.is_root, False)
            self.assertTrue(len(c.parent_ids[0]) == 40)
            self.assertEqual(c.parseable, True)
            self.assertTrue(len(c.patch_string) > 0)
            self.assertTrue(c.rev_id is None or len(c.rev_id) == 40)

    def test_parse_commit_string(self):
        cherry_messages = self.cherry_messages

        origin_id = "GitOrigin-RevId: 33299ac78503b3871b4a04f9def02497848eef57"
        for cm in cherry_messages:
            c = commit.Commit(
                "parentID\ncommitID\nauthor\nmessage1\nmessage2\n" + cm + "\n" + origin_id + "\n\n" + self.diff_marker + "\n" + self.dummy_diff,
                self.diff_marker)
            self.assertEqual(c.author, "author")
            self.assertEqual(c.commit_id, "commitID")
            self.assertTrue(len(c.commit_message.splitlines()) > 3)
            self.assertEqual(c.is_root, False)
            self.assertEqual(c.parent_ids, ["parentID"])
            self.assertEqual(c.parseable, True)
            self.assertEqual(c.rev_id, "33299ac78503b3871b4a04f9def02497848eef57")

        c.commit_message = "\ncommitID\nauthor\nmessage1\nmessage2\n" + cm + "\n" + origin_id + "\n\n" + self.diff_marker + "\npseudo diff"
        c = commit.Commit(
            "\ncommitID\nauthor\nmessage1\nmessage2\n" + cm + "\n" + origin_id + "\n\n" + self.diff_marker + "\n" + self.dummy_diff, self.diff_marker)
        self.assertEqual(c.is_root, True)

        self.assertRaises(ValueError, commit.Commit, "No Diff marker present\n", "diffmarker")
        self.assertRaises(ValueError, commit.Commit, "Diff marker present, but not enough of ID, parentID, author, message\ndiffmarker\n",
                          "diffmarker")

    def test_has_rev_id(self):
        c = self.test_commit
        self.assertEqual(c.has_rev_id(), True)

        c.commit_message = "\ncommitID\nauthor\nmessage1\nmessage2\n\n\n\n" + self.diff_marker + "\npseudo diff"
        self.assertEqual(c.has_rev_id(), False)

    def test_get_rev_id(self):
        c = self.test_commit
        self.assertEqual(c.get_rev_id(), 'aad8d335e2d876506a2948071644685ff99e14e4')

        c.commit_message = "\ncommitID\nauthor\nmessage1\nmessage2\n\n\n\n" + self.diff_marker + "\npseudo diff"
        self.assertEqual(c.get_rev_id(), None)

    def test_has_explicit_cherrypick(self):
        cms = self.cherry_messages
        c = self.test_commit
        for cm in cms:
            c.commit_message = "parentID\ncommitID\nauthor\nmessage1\nmessage2\n" + cm + "\n\n\n" + self.diff_marker + "\npseudo diff"
            self.assertEqual(c.has_explicit_cherrypick(), len(cm) > 0)

    def test_get_explicit_cherrypicks(self):
        cms = self.cherry_messages
        c = self.test_commit
        for e, cm in enumerate(cms):
            c.commit_message = "parentID\ncommitID\nauthor\nmessage1\nmessage2\n" + cm + "\n\n\n" + self.diff_marker + "\npseudo diff"
            self.assertEqual(len(c.get_explicit_cherrypicks()), cms[e].count("("))

    def test_other_is_in_my_cherries(self):
        c = self.test_commit
        d = self.test_commit2
        c.commit_id, c.rev_id, c.explicit_cherries = "c", None, []
        d.commit_id, d.rev_id, d.explicit_cherries = "d", None, []
        self.assertEqual(c.other_is_in_my_cherries(d), False)
        self.assertEqual(d.other_is_in_my_cherries(c), False)
        self.assertEqual(c.other_is_in_my_cherries(c), False)
        self.assertEqual(d.other_is_in_my_cherries(d), False)

        c.commit_id, c.rev_id, c.explicit_cherries = "c", None, ["c"]
        d.commit_id, d.rev_id, d.explicit_cherries = "d", None, []
        self.assertEqual(c.other_is_in_my_cherries(d), False)
        self.assertEqual(d.other_is_in_my_cherries(c), False)
        self.assertEqual(c.other_is_in_my_cherries(c), True)
        self.assertEqual(d.other_is_in_my_cherries(d), False)

        c.commit_id, c.rev_id, c.explicit_cherries = "c", None, ["d"]
        d.commit_id, d.rev_id, d.explicit_cherries = "d", None, []
        self.assertEqual(c.other_is_in_my_cherries(d), True)
        self.assertEqual(d.other_is_in_my_cherries(c), False)
        self.assertEqual(c.other_is_in_my_cherries(c), False)
        self.assertEqual(d.other_is_in_my_cherries(d), False)

        c.commit_id, c.rev_id, c.explicit_cherries = "c", None, ["d"]
        d.commit_id, d.rev_id, d.explicit_cherries = "d", None, ["c"]
        self.assertEqual(c.other_is_in_my_cherries(d), True)
        self.assertEqual(d.other_is_in_my_cherries(c), True)
        self.assertEqual(c.other_is_in_my_cherries(c), False)
        self.assertEqual(d.other_is_in_my_cherries(d), False)

        c.commit_id, c.rev_id, c.explicit_cherries = "c", None, ["d"]
        d.commit_id, d.rev_id, d.explicit_cherries = "d", "d", []
        self.assertEqual(c.other_is_in_my_cherries(d), True)
        self.assertEqual(d.other_is_in_my_cherries(c), False)
        self.assertEqual(c.other_is_in_my_cherries(c), False)
        self.assertEqual(d.other_is_in_my_cherries(d), False)

        c.commit_id, c.rev_id, c.explicit_cherries = "c", None, ["e", "d"]
        d.commit_id, d.rev_id, d.explicit_cherries = "d", "d", ["c", "f"]
        self.assertEqual(c.other_is_in_my_cherries(d), True)
        self.assertEqual(d.other_is_in_my_cherries(c), True)
        self.assertEqual(c.other_is_in_my_cherries(c), False)
        self.assertEqual(d.other_is_in_my_cherries(d), False)

    def test_get_all_cherries_in_group(self):
        pass
        # assert(False)

    def test_get_ordered_commit_pair(self):
        c = self.test_commit
        d = self.test_commit2
        # lower numbers == older
        self.assertEqual(c.get_ordered_commit_pair(d), (d, c))
        self.assertEqual(d.get_ordered_commit_pair(c), (d, c))

        c.date = 3
        d.date = 4
        self.assertEqual(c.get_ordered_commit_pair(d), (c, d))
        self.assertEqual(d.get_ordered_commit_pair(c), (c, d))

    def test_get_weighted_diff(self):
        for (c, cs) in [(self.test_commit, self.commit_strings[0]), (self.test_commit2, self.commit_strings[3])]:
            c.__class__.rs = False
            patch_set = unidiff.PatchSet(cs.split(self.diff_marker)[1][1:])
            for (lines, weight) in c.get_weighted_diff(patch_set, c.commit_message):
                special_starters = ["+", "-", "a/", "b/", "/dev/null"]
                lines = lines.splitlines()
                specials = 0
                for line in lines:
                    for s in special_starters:
                        if line.startswith(s):
                            specials += 1
                            break
                self.assertEqual(weight, max(((len(lines) - specials) * c.normal_weight + specials * c.special_weight), 1) // max(len(lines), 1))

        diff_marker = "DIFF_MARKER"
        dummy = commit.dummy_cherry_commit("abc", diff_marker)
        patch_set = unidiff.PatchSet("")
        self.assertEqual([], dummy.get_weighted_diff(patch_set, diff_marker))

        bin_file_diff = "diff --git a/image.png b/image.png\nindex 6bf2d1e..58b3c6d 100644\nBinary files a/image.png and b/image.png differ"
        dummy.parseable = True
        patch_set = unidiff.PatchSet(bin_file_diff)
        self.assertEqual([('a/image.png', 10), ('b/image.png', 10), ('!!Dummy Commit!!', 1)], dummy.get_weighted_diff(patch_set, dummy.commit_message))

    def test_get_bit_mask(self):
        for cm in self.commit_strings:
            c = commit.Commit(cm, self.diff_marker)
            patch_string = cm.split(self.diff_marker)[1][1:]
            patch_set = unidiff.PatchSet(patch_string)
            self.assertEqual(c.get_bit_mask(patch_set, c.commit_message), c.get_bit_mask(patch_set, c.commit_message))
            self.assertTrue(0 < c.get_bit_mask(patch_set, c.commit_message) < 2 ** commit.bit_mask_length)

    def test_dummy(self):
        dummy_info = [("commit_id" + str(i), "diff_marker" + str(i)) for i in range(10)]
        for i in range(10):
            (cid, dm) = dummy_info[i]
            dummy = commit.dummy_cherry_commit(cid, dm)

            self.assertEqual(cid, dummy.commit_id)
            self.assertEqual("A. Nonymous", dummy.author)
            self.assertEqual("!!Dummy Commit!!\n", dummy.commit_message)
            self.assertEqual(False, dummy.parseable)
            self.assertEqual(True, dummy.is_root)

    def test_clean_patch_string(self):
        dummy_diff_with = "diff --git a/sys/kern/imgact_elf.c b/sys/kern/imgact_elf.c\nindex 28ffdd03dd6d..494456ceeeae 100644\n--- a/sys/kern/imgact_elf.c\n+++ b/sys/kern/imgact_elf.c\n@@ -617,9 +617,9 @@ __elfN(map_insert)(const struct image_params *imgp, vm_map_t map,\n 	return (KERN_SUCCESS);\n }\n \n-static int __elfN(load_section)(const struct image_params *imgp,\n-    vm_ooffset_t offset, caddr_t vmaddr, size_t memsz, size_t filsz,\n-    vm_prot_t prot)\n+static int\n+__elfN(load_section)(const struct image_params *imgp, vm_ooffset_t offset,\n+    caddr_t vmaddr, size_t memsz, size_t filsz, vm_prot_t prot)\n {\n 	struct sf_buf *sf;\n 	size_t map_len;\n"
        dummy_diff_without = "diff --git a/sys/kern/imgact_elf.c b/sys/kern/imgact_elf.c\n--- a/sys/kern/imgact_elf.c\n+++ b/sys/kern/imgact_elf.c\n@@ -617,9 +617,9 @@ __elfN(map_insert)(const struct image_params *imgp, vm_map_t map,\n 	return (KERN_SUCCESS);\n }\n \n-static int __elfN(load_section)(const struct image_params *imgp,\n-    vm_ooffset_t offset, caddr_t vmaddr, size_t memsz, size_t filsz,\n-    vm_prot_t prot)\n+static int\n+__elfN(load_section)(const struct image_params *imgp, vm_ooffset_t offset,\n+    caddr_t vmaddr, size_t memsz, size_t filsz, vm_prot_t prot)\n {\n 	struct sf_buf *sf;\n 	size_t map_len;\n"
        dummy_with = commit.dummy_cherry_commit("id", "marker")
        dummy_with.parseable = True
        dummy_without = commit.dummy_cherry_commit("id", "marker")
        dummy_without.parseable = True

        for i in range(3):
            dummy_with.patch_string = dummy_with.clean_patch_string(unidiff.PatchSet(dummy_diff_with * 10 ** i).__str__())
            dummy_without.patch_string = dummy_with.clean_patch_string(unidiff.PatchSet(dummy_diff_without * 10 ** i).__str__())

            self.assertFalse(dummy_with.patch_string.__contains__("index "))
            if len(dummy_diff_without) * 10 ** i < commit.max_levenshtein_string_length:
                self.assertTrue(len(dummy_with.patch_string) == len(dummy_without.patch_string))
            else:
                self.assertTrue(len(dummy_with.patch_string) < len(dummy_without.patch_string))

    def test_has_similar_text_to(self):
        dummy_with = commit.dummy_cherry_commit("id", "marker")
        dummy_without = commit.dummy_cherry_commit("id", "marker")
        self.assertEqual((False, None), dummy_with.has_similar_text_to(dummy_without))

        dummy_diff_with = "diff --git a/sys/kern/imgact_elf.c b/sys/kern/imgact_elf.c\nindex 28ffdd03dd6d..494456ceeeae 100644\n--- a/sys/kern/imgact_elf.c\n+++ b/sys/kern/imgact_elf.c\n@@ -617,9 +617,9 @@ __elfN(map_insert)(const struct image_params *imgp, vm_map_t map,\n 	return (KERN_SUCCESS);\n }\n \n-static int __elfN(load_section)(const struct image_params *imgp,\n-    vm_ooffset_t offset, caddr_t vmaddr, size_t memsz, size_t filsz,\n-    vm_prot_t prot)\n+static int\n+__elfN(load_section)(const struct image_params *imgp, vm_ooffset_t offset,\n+    caddr_t vmaddr, size_t memsz, size_t filsz, vm_prot_t prot)\n {\n 	struct sf_buf *sf;\n 	size_t map_len;\n"
        dummy_diff_without = "diff --git a/sys/kern/imgact_elf.c b/sys/kern/imgact_elf.c\n--- a/sys/kern/imgact_elf.c\n+++ b/sys/kern/imgact_elf.c\n@@ -617,9 +617,9 @@ __elfN(map_insert)(const struct image_params *imgp, vm_map_t map,\n 	return (KERN_SUCCESS);\n }\n \n-static int __elfN(load_section)(const struct image_params *imgp,\n-    vm_ooffset_t offset, caddr_t vmaddr, size_t memsz, size_t filsz,\n-    vm_prot_t prot)\n+static int\n+__elfN(load_section)(const struct image_params *imgp, vm_ooffset_t offset,\n+    caddr_t vmaddr, size_t memsz, size_t filsz, vm_prot_t prot)\n {\n 	struct sf_buf *sf;\n 	size_t map_len;\n"
        dummy_with.parseable = True
        dummy_without.parseable = True
        dummy_with.patch_string = dummy_with.clean_patch_string(unidiff.PatchSet(dummy_diff_with).__str__())
        dummy_without.patch_string = dummy_with.clean_patch_string(unidiff.PatchSet(dummy_diff_without).__str__())
        self.assertEqual((True, 1.0), dummy_with.has_similar_text_to(dummy_with))
        self.assertEqual((True, 1.0), dummy_without.has_similar_text_to(dummy_without))
        self.assertEqual((True, 1.0), dummy_with.has_similar_text_to(dummy_without))

        dummy_without.patch_string = dummy_without.clean_patch_string((unidiff.PatchSet(self.dummy_diff*4)).__str__())
        (truthy, floaty) = dummy_with.has_similar_text_to(dummy_without)
        self.assertEqual(False, truthy)
        self.assertTrue(0 < floaty < 1)

        dummy_without.patch_string = dummy_without.clean_patch_string(unidiff.PatchSet(self.dummy_diff).__str__())
        self.assertEqual((False, 0.0), dummy_with.has_similar_text_to(dummy_without))

    def test_add_neighbor(self):
        dummy = commit.dummy_cherry_commit("dummy", "marker")
        dummy.parseable = True
        dummy.bit_mask = 1
        dummy.patch_string = self.dummy_diff
        self.assertEqual([], dummy.neighbor_connections)
        dummy.add_neighbor(dummy, False)
        neighbors = [commit.Neighbor(neighbor=dummy, sim=True, bit_sim=1.0, levenshtein_sim=1.0, explicit_cherrypick=False, is_child_of=False)]
        self.assertEqual(neighbors, dummy.neighbor_connections)
        dummy.add_neighbor(dummy, False)
        self.assertEqual(neighbors, dummy.neighbor_connections)

        neighbor = commit.dummy_cherry_commit("neighbor", "marker")
        neighbor.parseable = True
        neighbor.bit_mask = 3
        neighbor.patch_string = self.dummy_diff
        dummy.add_neighbor(neighbor, False)
        neighbors += [commit.Neighbor(neighbor=neighbor, sim=True, bit_sim=63 / 64, levenshtein_sim=1.0, explicit_cherrypick=False, is_child_of=False)]
        self.assertEqual(neighbors, dummy.neighbor_connections)

        # add same neighbor: nothing should change
        other_neighbor = commit.dummy_cherry_commit("neighbor", "marker")
        other_neighbor.explicit_cherries = [dummy.commit_id]
        dummy.add_neighbor(other_neighbor, False)
        self.assertEqual(neighbors, dummy.neighbor_connections)

        # add another neighbor, it should be added again
        other_neighbor.commit_id = "other_neighbor"
        dummy.explicit_cherries = [other_neighbor.commit_id]
        dummy.add_neighbor(other_neighbor, False)
        neighbors += [commit.Neighbor(neighbor=other_neighbor, sim=False, bit_sim=None, levenshtein_sim=None, explicit_cherrypick=True, is_child_of=False)]
        self.assertEqual(neighbors, dummy.neighbor_connections)

        other_neighbor = commit.dummy_cherry_commit("last neighbor", "marker")
        dummy.explicit_cherries = [other_neighbor.commit_id]
        dummy.add_neighbor(other_neighbor, False)
        neighbors += [commit.Neighbor(neighbor=other_neighbor, sim=False, bit_sim=None, levenshtein_sim=None, explicit_cherrypick=True, is_child_of=False)]
        self.assertEqual(neighbors, dummy.neighbor_connections)

    def test_is_child_of(self):
        child = commit.dummy_cherry_commit("child", "marker")
        child.parent_ids = ["parent"]
        parent = commit.dummy_cherry_commit("parent", "marker")

        self.assertFalse(child.is_child_of(child))
        self.assertFalse(parent.is_child_of(parent))
        self.assertTrue(child.is_child_of(parent))


if __name__ == '__main__':
    unittest.main()
